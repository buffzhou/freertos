
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005058  08005058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005060  08005060  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004998  2000000c  08005074  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049a4  08005074  000249a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ee4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e6e  00000000  00000000  00035f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00038d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230e8  00000000  00000000  0003aee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8af  00000000  00000000  0005dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4974  00000000  00000000  0006d87f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001421f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  00142270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff4 	.word	0x08004ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08004ff4 	.word	0x08004ff4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8d8 	bl	80006ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f004 fc62 	bl	8004dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f004 fc34 	bl	8004d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000
 8000538:	200048f0 	.word	0x200048f0

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200048f0 	.word	0x200048f0

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff4c 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d6:	f7ff ff61 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6978      	ldr	r0, [r7, #20]
 80006e2:	f7ff ffb1 	bl	8000648 <NVIC_EncodePriority>
 80006e6:	4602      	mov	r2, r0
 80006e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <__NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff54 	bl	80005b8 <__NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	e16b      	b.n	8000a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000734:	2201      	movs	r2, #1
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	429a      	cmp	r2, r3
 800074e:	f040 815a 	bne.w	8000a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d003      	beq.n	8000762 <HAL_GPIO_Init+0x4a>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b12      	cmp	r3, #18
 8000760:	d123      	bne.n	80007aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	08da      	lsrs	r2, r3, #3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3208      	adds	r2, #8
 800076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800076e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	220f      	movs	r2, #15
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43db      	mvns	r3, r3
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	4013      	ands	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	691a      	ldr	r2, [r3, #16]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4313      	orrs	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	08da      	lsrs	r2, r3, #3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3208      	adds	r2, #8
 80007a4:	69b9      	ldr	r1, [r7, #24]
 80007a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2203      	movs	r2, #3
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	4013      	ands	r3, r2
 80007c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f003 0203 	and.w	r2, r3, #3
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d00b      	beq.n	80007fe <HAL_GPIO_Init+0xe6>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d007      	beq.n	80007fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f2:	2b11      	cmp	r3, #17
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d130      	bne.n	8000860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2203      	movs	r2, #3
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4013      	ands	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	4313      	orrs	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	f003 0201 	and.w	r2, r3, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4313      	orrs	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 80b4 	beq.w	8000a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a5e      	ldr	r2, [pc, #376]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b5c      	ldr	r3, [pc, #368]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ba:	4a5a      	ldr	r2, [pc, #360]	; (8000a24 <HAL_GPIO_Init+0x30c>)
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3302      	adds	r3, #2
 80008c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4013      	ands	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <HAL_GPIO_Init+0x310>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d02b      	beq.n	800093e <HAL_GPIO_Init+0x226>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a50      	ldr	r2, [pc, #320]	; (8000a2c <HAL_GPIO_Init+0x314>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d025      	beq.n	800093a <HAL_GPIO_Init+0x222>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <HAL_GPIO_Init+0x318>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d01f      	beq.n	8000936 <HAL_GPIO_Init+0x21e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4e      	ldr	r2, [pc, #312]	; (8000a34 <HAL_GPIO_Init+0x31c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d019      	beq.n	8000932 <HAL_GPIO_Init+0x21a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a4d      	ldr	r2, [pc, #308]	; (8000a38 <HAL_GPIO_Init+0x320>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d013      	beq.n	800092e <HAL_GPIO_Init+0x216>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <HAL_GPIO_Init+0x324>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d00d      	beq.n	800092a <HAL_GPIO_Init+0x212>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <HAL_GPIO_Init+0x328>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d007      	beq.n	8000926 <HAL_GPIO_Init+0x20e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4a      	ldr	r2, [pc, #296]	; (8000a44 <HAL_GPIO_Init+0x32c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_GPIO_Init+0x20a>
 800091e:	2307      	movs	r3, #7
 8000920:	e00e      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000922:	2308      	movs	r3, #8
 8000924:	e00c      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000926:	2306      	movs	r3, #6
 8000928:	e00a      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800092a:	2305      	movs	r3, #5
 800092c:	e008      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800092e:	2304      	movs	r3, #4
 8000930:	e006      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000932:	2303      	movs	r3, #3
 8000934:	e004      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000936:	2302      	movs	r3, #2
 8000938:	e002      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800093e:	2300      	movs	r3, #0
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	f002 0203 	and.w	r2, r2, #3
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	4093      	lsls	r3, r2
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000950:	4934      	ldr	r1, [pc, #208]	; (8000a24 <HAL_GPIO_Init+0x30c>)
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	3302      	adds	r3, #2
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	43db      	mvns	r3, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4013      	ands	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000982:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <HAL_GPIO_Init+0x330>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	43db      	mvns	r3, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	f67f ae90 	bls.w	8000734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a14:	bf00      	nop
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40013c00 	.word	0x40013c00

08000a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a5c:	787b      	ldrb	r3, [r7, #1]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a62:	887a      	ldrh	r2, [r7, #2]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a68:	e003      	b.n	8000a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	041a      	lsls	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	619a      	str	r2, [r3, #24]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e22d      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d075      	beq.n	8000b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a9e:	4ba3      	ldr	r3, [pc, #652]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d00c      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aaa:	4ba0      	ldr	r3, [pc, #640]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d112      	bne.n	8000adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ab6:	4b9d      	ldr	r3, [pc, #628]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ac2:	d10b      	bne.n	8000adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	4b99      	ldr	r3, [pc, #612]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d05b      	beq.n	8000b88 <HAL_RCC_OscConfig+0x108>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d157      	bne.n	8000b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e208      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae4:	d106      	bne.n	8000af4 <HAL_RCC_OscConfig+0x74>
 8000ae6:	4b91      	ldr	r3, [pc, #580]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a90      	ldr	r2, [pc, #576]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e01d      	b.n	8000b30 <HAL_RCC_OscConfig+0xb0>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000afe:	4b8b      	ldr	r3, [pc, #556]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a8a      	ldr	r2, [pc, #552]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b88      	ldr	r3, [pc, #544]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a87      	ldr	r2, [pc, #540]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <HAL_RCC_OscConfig+0xb0>
 8000b18:	4b84      	ldr	r3, [pc, #528]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a83      	ldr	r2, [pc, #524]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a80      	ldr	r2, [pc, #512]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d013      	beq.n	8000b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd00 	bl	800053c <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b40:	f7ff fcfc 	bl	800053c <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b64      	cmp	r3, #100	; 0x64
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e1cd      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f0      	beq.n	8000b40 <HAL_RCC_OscConfig+0xc0>
 8000b5e:	e014      	b.n	8000b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcec 	bl	800053c <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fce8 	bl	800053c <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	; 0x64
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e1b9      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0xe8>
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d063      	beq.n	8000c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b96:	4b65      	ldr	r3, [pc, #404]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d11c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d116      	bne.n	8000be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x152>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d001      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e18d      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd2:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4952      	ldr	r1, [pc, #328]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be6:	e03a      	b.n	8000c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <HAL_RCC_OscConfig+0x2b0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fca1 	bl	800053c <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fc9d 	bl	800053c <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e16e      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c10:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f0      	beq.n	8000bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1c:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4940      	ldr	r1, [pc, #256]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e015      	b.n	8000c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c32:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <HAL_RCC_OscConfig+0x2b0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc80 	bl	800053c <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c40:	f7ff fc7c 	bl	800053c <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e14d      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d030      	beq.n	8000ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d016      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_RCC_OscConfig+0x2b4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c78:	f7ff fc60 	bl	800053c <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc5c 	bl	800053c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e12d      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x200>
 8000c9e:	e015      	b.n	8000ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_RCC_OscConfig+0x2b4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fc49 	bl	800053c <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cae:	f7ff fc45 	bl	800053c <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e116      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f0      	bne.n	8000cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a0 	beq.w	8000e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d121      	bne.n	8000d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc0b 	bl	800053c <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d28:	e011      	b.n	8000d4e <HAL_RCC_OscConfig+0x2ce>
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	42470000 	.word	0x42470000
 8000d34:	42470e80 	.word	0x42470e80
 8000d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d3c:	f7ff fbfe 	bl	800053c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e0cf      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <HAL_RCC_OscConfig+0x478>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
 8000d62:	4b66      	ldr	r3, [pc, #408]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d66:	4a65      	ldr	r2, [pc, #404]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d6e:	e01c      	b.n	8000daa <HAL_RCC_OscConfig+0x32a>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d10c      	bne.n	8000d92 <HAL_RCC_OscConfig+0x312>
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d7c:	4a5f      	ldr	r2, [pc, #380]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6713      	str	r3, [r2, #112]	; 0x70
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d88:	4a5c      	ldr	r2, [pc, #368]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000d90:	e00b      	b.n	8000daa <HAL_RCC_OscConfig+0x32a>
 8000d92:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d96:	4a59      	ldr	r2, [pc, #356]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da2:	4a56      	ldr	r2, [pc, #344]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000da4:	f023 0304 	bic.w	r3, r3, #4
 8000da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d015      	beq.n	8000dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db2:	f7ff fbc3 	bl	800053c <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db8:	e00a      	b.n	8000dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dba:	f7ff fbbf 	bl	800053c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d901      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e08e      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ee      	beq.n	8000dba <HAL_RCC_OscConfig+0x33a>
 8000ddc:	e014      	b.n	8000e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dde:	f7ff fbad 	bl	800053c <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de4:	e00a      	b.n	8000dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f7ff fba9 	bl	800053c <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e078      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1ee      	bne.n	8000de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d105      	bne.n	8000e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d064      	beq.n	8000eec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d05c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d141      	bne.n	8000eba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <HAL_RCC_OscConfig+0x480>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fb7e 	bl	800053c <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e44:	f7ff fb7a 	bl	800053c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e04b      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	491d      	ldr	r1, [pc, #116]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_RCC_OscConfig+0x480>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb53 	bl	800053c <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fb4f 	bl	800053c <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e020      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x41a>
 8000eb8:	e018      	b.n	8000eec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_RCC_OscConfig+0x480>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb3c 	bl	800053c <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fb38 	bl	800053c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e009      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_RCC_OscConfig+0x47c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x448>
 8000ee6:	e001      	b.n	8000eec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40007000 	.word	0x40007000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	42470060 	.word	0x42470060

08000f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0ca      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f18:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d90c      	bls.n	8000f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f26:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d001      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0b6      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a57      	ldr	r2, [pc, #348]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	494c      	ldr	r1, [pc, #304]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d044      	beq.n	8001024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d119      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e07d      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e06d      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e065      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f023 0203 	bic.w	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4933      	ldr	r1, [pc, #204]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff4:	f7ff faa2 	bl	800053c <HAL_GetTick>
 8000ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	e00a      	b.n	8001012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fa9e 	bl	800053c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	f241 3288 	movw	r2, #5000	; 0x1388
 800100a:	4293      	cmp	r3, r2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e04d      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 020c 	and.w	r2, r3, #12
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	429a      	cmp	r2, r3
 8001022:	d1eb      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d20c      	bcs.n	800104c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_RCC_ClockConfig+0x1b4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e030      	b.n	80010ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4915      	ldr	r1, [pc, #84]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8001066:	4313      	orrs	r3, r2
 8001068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8001086:	4313      	orrs	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800108a:	f000 f81d 	bl	80010c8 <HAL_RCC_GetSysClockFreq>
 800108e:	4601      	mov	r1, r0
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	fa21 f303 	lsr.w	r3, r1, r3
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f003 fe8e 	bl	8004dc8 <HAL_InitTick>

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00
 80010bc:	40023800 	.word	0x40023800
 80010c0:	08005040 	.word	0x08005040
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_GetSysClockFreq+0x32>
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d008      	beq.n	8001100 <HAL_RCC_GetSysClockFreq+0x38>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 80b4 	bne.w	800125c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80010f6:	60bb      	str	r3, [r7, #8]
       break;
 80010f8:	e0b3      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80010fc:	60bb      	str	r3, [r7, #8]
      break;
 80010fe:	e0b0      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001108:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800110a:	4b58      	ldr	r3, [pc, #352]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d04a      	beq.n	80011ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	099b      	lsrs	r3, r3, #6
 800111c:	f04f 0400 	mov.w	r4, #0
 8001120:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	ea03 0501 	and.w	r5, r3, r1
 800112c:	ea04 0602 	and.w	r6, r4, r2
 8001130:	4629      	mov	r1, r5
 8001132:	4632      	mov	r2, r6
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	f04f 0400 	mov.w	r4, #0
 800113c:	0154      	lsls	r4, r2, #5
 800113e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001142:	014b      	lsls	r3, r1, #5
 8001144:	4619      	mov	r1, r3
 8001146:	4622      	mov	r2, r4
 8001148:	1b49      	subs	r1, r1, r5
 800114a:	eb62 0206 	sbc.w	r2, r2, r6
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	f04f 0400 	mov.w	r4, #0
 8001156:	0194      	lsls	r4, r2, #6
 8001158:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800115c:	018b      	lsls	r3, r1, #6
 800115e:	1a5b      	subs	r3, r3, r1
 8001160:	eb64 0402 	sbc.w	r4, r4, r2
 8001164:	f04f 0100 	mov.w	r1, #0
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	00e2      	lsls	r2, r4, #3
 800116e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001172:	00d9      	lsls	r1, r3, #3
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	195b      	adds	r3, r3, r5
 800117a:	eb44 0406 	adc.w	r4, r4, r6
 800117e:	f04f 0100 	mov.w	r1, #0
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	0262      	lsls	r2, r4, #9
 8001188:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800118c:	0259      	lsls	r1, r3, #9
 800118e:	460b      	mov	r3, r1
 8001190:	4614      	mov	r4, r2
 8001192:	4618      	mov	r0, r3
 8001194:	4621      	mov	r1, r4
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f04f 0400 	mov.w	r4, #0
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	f7ff f816 	bl	80001d0 <__aeabi_uldivmod>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e049      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	099b      	lsrs	r3, r3, #6
 80011b2:	f04f 0400 	mov.w	r4, #0
 80011b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	ea03 0501 	and.w	r5, r3, r1
 80011c2:	ea04 0602 	and.w	r6, r4, r2
 80011c6:	4629      	mov	r1, r5
 80011c8:	4632      	mov	r2, r6
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	0154      	lsls	r4, r2, #5
 80011d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011d8:	014b      	lsls	r3, r1, #5
 80011da:	4619      	mov	r1, r3
 80011dc:	4622      	mov	r2, r4
 80011de:	1b49      	subs	r1, r1, r5
 80011e0:	eb62 0206 	sbc.w	r2, r2, r6
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	f04f 0400 	mov.w	r4, #0
 80011ec:	0194      	lsls	r4, r2, #6
 80011ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011f2:	018b      	lsls	r3, r1, #6
 80011f4:	1a5b      	subs	r3, r3, r1
 80011f6:	eb64 0402 	sbc.w	r4, r4, r2
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	00e2      	lsls	r2, r4, #3
 8001204:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001208:	00d9      	lsls	r1, r3, #3
 800120a:	460b      	mov	r3, r1
 800120c:	4614      	mov	r4, r2
 800120e:	195b      	adds	r3, r3, r5
 8001210:	eb44 0406 	adc.w	r4, r4, r6
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	02a2      	lsls	r2, r4, #10
 800121e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001222:	0299      	lsls	r1, r3, #10
 8001224:	460b      	mov	r3, r1
 8001226:	4614      	mov	r4, r2
 8001228:	4618      	mov	r0, r3
 800122a:	4621      	mov	r1, r4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f04f 0400 	mov.w	r4, #0
 8001232:	461a      	mov	r2, r3
 8001234:	4623      	mov	r3, r4
 8001236:	f7fe ffcb 	bl	80001d0 <__aeabi_uldivmod>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	0c1b      	lsrs	r3, r3, #16
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	3301      	adds	r3, #1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	60bb      	str	r3, [r7, #8]
      break;
 800125a:	e002      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800125e:	60bb      	str	r3, [r7, #8]
      break;
 8001260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001262:	68bb      	ldr	r3, [r7, #8]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	00f42400 	.word	0x00f42400
 8001274:	007a1200 	.word	0x007a1200

08001278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_RCC_GetHCLKFreq+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001294:	f7ff fff0 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8001298:	4601      	mov	r1, r0
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	0a9b      	lsrs	r3, r3, #10
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	08005050 	.word	0x08005050

080012b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	220f      	movs	r2, #15
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_RCC_GetClockConfig+0x5c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_RCC_GetClockConfig+0x5c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_RCC_GetClockConfig+0x5c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_RCC_GetClockConfig+0x60>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 020f 	and.w	r2, r3, #15
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40023c00 	.word	0x40023c00

0800131c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001340:	2b00      	cmp	r3, #0
 8001342:	d035      	beq.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001344:	4b62      	ldr	r3, [pc, #392]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800134a:	f7ff f8f7 	bl	800053c <HAL_GetTick>
 800134e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001352:	f7ff f8f3 	bl	800053c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0b0      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001364:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	019a      	lsls	r2, r3, #6
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	071b      	lsls	r3, r3, #28
 800137c:	4955      	ldr	r1, [pc, #340]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001384:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800138a:	f7ff f8d7 	bl	800053c <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001392:	f7ff f8d3 	bl	800053c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e090      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8083 	beq.w	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a3e      	ldr	r2, [pc, #248]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013e6:	f7ff f8a9 	bl	800053c <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff f8a5 	bl	800053c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e062      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02f      	beq.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	429a      	cmp	r2, r3
 8001428:	d028      	beq.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d114      	bne.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff f873 	bl	800053c <HAL_GetTick>
 8001456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff f86f 	bl	800053c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e02a      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001488:	d10d      	bne.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800149a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	e005      	b.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80014b0:	6093      	str	r3, [r2, #8]
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014be:	4905      	ldr	r1, [pc, #20]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	42470068 	.word	0x42470068
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42470e40 	.word	0x42470e40

080014e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e083      	b.n	80015fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7f5b      	ldrb	r3, [r3, #29]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f003 fc1e 	bl	8004d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	22ca      	movs	r2, #202	; 0xca
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2253      	movs	r2, #83	; 0x53
 800151c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f897 	bl	8001652 <RTC_EnterInitMode>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2204      	movs	r2, #4
 8001536:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e05e      	b.n	80015fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800154a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800154e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	041a      	lsls	r2, r3, #16
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800159a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10e      	bne.n	80015c8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f829 	bl	8001602 <HAL_RTC_WaitForSynchro>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e018      	b.n	80015fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800161c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800161e:	f7fe ff8d 	bl	800053c <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001624:	e009      	b.n	800163a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001626:	f7fe ff89 	bl	800053c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001634:	d901      	bls.n	800163a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e007      	b.n	800164a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ee      	beq.n	8001626 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d119      	bne.n	80016a0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001676:	f7fe ff61 	bl	800053c <HAL_GetTick>
 800167a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800167c:	e009      	b.n	8001692 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800167e:	f7fe ff5d 	bl	800053c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168c:	d901      	bls.n	8001692 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e007      	b.n	80016a2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01d      	b.n	80016f8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d106      	bne.n	80016d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f815 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f000 f967 	bl	80019bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d007      	beq.n	800174e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d122      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b02      	cmp	r3, #2
 800177e:	d11b      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0202 	mvn.w	r2, #2
 8001788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8ee 	bl	8001980 <HAL_TIM_IC_CaptureCallback>
 80017a4:	e005      	b.n	80017b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f8e0 	bl	800196c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8f1 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d122      	bne.n	800180c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d11b      	bne.n	800180c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0204 	mvn.w	r2, #4
 80017dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8c4 	bl	8001980 <HAL_TIM_IC_CaptureCallback>
 80017f8:	e005      	b.n	8001806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8b6 	bl	800196c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8c7 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b08      	cmp	r3, #8
 8001818:	d122      	bne.n	8001860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b08      	cmp	r3, #8
 8001826:	d11b      	bne.n	8001860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0208 	mvn.w	r2, #8
 8001830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2204      	movs	r2, #4
 8001836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f89a 	bl	8001980 <HAL_TIM_IC_CaptureCallback>
 800184c:	e005      	b.n	800185a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f88c 	bl	800196c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f89d 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b10      	cmp	r3, #16
 800186c:	d122      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b10      	cmp	r3, #16
 800187a:	d11b      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0210 	mvn.w	r2, #16
 8001884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2208      	movs	r2, #8
 800188a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f870 	bl	8001980 <HAL_TIM_IC_CaptureCallback>
 80018a0:	e005      	b.n	80018ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f862 	bl	800196c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f873 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10e      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0201 	mvn.w	r2, #1
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f003 f9f2 	bl	8004cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b80      	cmp	r3, #128	; 0x80
 80018ec:	d10e      	bne.n	800190c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d107      	bne.n	800190c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f902 	bl	8001b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d10e      	bne.n	8001938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d107      	bne.n	8001938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f838 	bl	80019a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b20      	cmp	r3, #32
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b20      	cmp	r3, #32
 8001952:	d107      	bne.n	8001964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0220 	mvn.w	r2, #32
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8cc 	bl	8001afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <TIM_Base_SetConfig+0x114>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <TIM_Base_SetConfig+0x40>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d00f      	beq.n	80019fc <TIM_Base_SetConfig+0x40>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <TIM_Base_SetConfig+0x118>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00b      	beq.n	80019fc <TIM_Base_SetConfig+0x40>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3c      	ldr	r2, [pc, #240]	; (8001ad8 <TIM_Base_SetConfig+0x11c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <TIM_Base_SetConfig+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <TIM_Base_SetConfig+0x120>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <TIM_Base_SetConfig+0x40>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <TIM_Base_SetConfig+0x124>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <TIM_Base_SetConfig+0x114>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d02b      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d027      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a2c      	ldr	r2, [pc, #176]	; (8001ad4 <TIM_Base_SetConfig+0x118>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d023      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <TIM_Base_SetConfig+0x11c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <TIM_Base_SetConfig+0x120>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01b      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <TIM_Base_SetConfig+0x124>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d017      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <TIM_Base_SetConfig+0x128>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <TIM_Base_SetConfig+0x12c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00f      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <TIM_Base_SetConfig+0x130>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00b      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <TIM_Base_SetConfig+0x134>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <TIM_Base_SetConfig+0x138>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d003      	beq.n	8001a6e <TIM_Base_SetConfig+0xb2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <TIM_Base_SetConfig+0x13c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d108      	bne.n	8001a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <TIM_Base_SetConfig+0x114>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d003      	beq.n	8001ab4 <TIM_Base_SetConfig+0xf8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <TIM_Base_SetConfig+0x124>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d103      	bne.n	8001abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	615a      	str	r2, [r3, #20]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	40000c00 	.word	0x40000c00
 8001ae0:	40010400 	.word	0x40010400
 8001ae4:	40014000 	.word	0x40014000
 8001ae8:	40014400 	.word	0x40014400
 8001aec:	40014800 	.word	0x40014800
 8001af0:	40001800 	.word	0x40001800
 8001af4:	40001c00 	.word	0x40001c00
 8001af8:	40002000 	.word	0x40002000

08001afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b2a:	f3ef 8305 	mrs	r3, IPSR
 8001b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b36:	f3ef 8310 	mrs	r3, PRIMASK
 8001b3a:	607b      	str	r3, [r7, #4]
  return(result);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <osKernelInitialize+0x32>
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <osKernelInitialize+0x64>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d109      	bne.n	8001b5e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001b56:	f06f 0305 	mvn.w	r3, #5
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e00c      	b.n	8001b78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <osKernelInitialize+0x64>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <osKernelInitialize+0x64>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e002      	b.n	8001b78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000028 	.word	0x20000028

08001b8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b92:	f3ef 8305 	mrs	r3, IPSR
 8001b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10f      	bne.n	8001bbe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba2:	607b      	str	r3, [r7, #4]
  return(result);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <osKernelStart+0x32>
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <osKernelStart+0x64>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d109      	bne.n	8001bc6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8001bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001bbe:	f06f 0305 	mvn.w	r3, #5
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e00e      	b.n	8001be4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <osKernelStart+0x64>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <osKernelStart+0x64>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001bd4:	f001 fa80 	bl	80030d8 <vTaskStartScheduler>
      stat = osOK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e002      	b.n	8001be4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001be4:	68fb      	ldr	r3, [r7, #12]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000028 	.word	0x20000028

08001bf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b092      	sub	sp, #72	; 0x48
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c04:	f3ef 8305 	mrs	r3, IPSR
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 8094 	bne.w	8001d3a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c12:	f3ef 8310 	mrs	r3, PRIMASK
 8001c16:	623b      	str	r3, [r7, #32]
  return(result);
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 808d 	bne.w	8001d3a <osThreadNew+0x146>
 8001c20:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <osThreadNew+0x150>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d106      	bne.n	8001c36 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c28:	f3ef 8311 	mrs	r3, BASEPRI
 8001c2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 8082 	bne.w	8001d3a <osThreadNew+0x146>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d07e      	beq.n	8001d3a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001c40:	2318      	movs	r3, #24
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001c44:	2300      	movs	r3, #0
 8001c46:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001c48:	f107 031b 	add.w	r3, r7, #27
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d045      	beq.n	8001ce6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <osThreadNew+0x74>
        name = attr->name;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <osThreadNew+0x9a>
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	2b38      	cmp	r3, #56	; 0x38
 8001c80:	d805      	bhi.n	8001c8e <osThreadNew+0x9a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <osThreadNew+0x9e>
        return (NULL);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e054      	b.n	8001d3c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00e      	beq.n	8001cc8 <osThreadNew+0xd4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b53      	cmp	r3, #83	; 0x53
 8001cb0:	d90a      	bls.n	8001cc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <osThreadNew+0xd4>
        mem = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc6:	e010      	b.n	8001cea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <osThreadNew+0xf6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d108      	bne.n	8001cea <osThreadNew+0xf6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <osThreadNew+0xf6>
          mem = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce4:	e001      	b.n	8001cea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d110      	bne.n	8001d12 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cf8:	9202      	str	r2, [sp, #8]
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f001 f82a 	bl	8002d60 <xTaskCreateStatic>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e013      	b.n	8001d3a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d110      	bne.n	8001d3a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f001 f871 	bl	8002e12 <xTaskCreate>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d001      	beq.n	8001d3a <osThreadNew+0x146>
          hTask = NULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d3a:	697b      	ldr	r3, [r7, #20]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3738      	adds	r7, #56	; 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000028 	.word	0x20000028

08001d48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d50:	f3ef 8305 	mrs	r3, IPSR
 8001d54:	613b      	str	r3, [r7, #16]
  return(result);
 8001d56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10f      	bne.n	8001d7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <osDelay+0x34>
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <osDelay+0x58>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d109      	bne.n	8001d84 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d70:	f3ef 8311 	mrs	r3, BASEPRI
 8001d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <osDelay+0x3c>
    stat = osErrorISR;
 8001d7c:	f06f 0305 	mvn.w	r3, #5
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e007      	b.n	8001d94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 f96e 	bl	8003070 <vTaskDelay>
    }
  }

  return (stat);
 8001d94:	697b      	ldr	r3, [r7, #20]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000028 	.word	0x20000028

08001da4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001db4:	f3ef 8305 	mrs	r3, IPSR
 8001db8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001dba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d170      	bne.n	8001ea2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8001dc4:	617b      	str	r3, [r7, #20]
  return(result);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d16a      	bne.n	8001ea2 <osMessageQueueNew+0xfe>
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <osMessageQueueNew+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d105      	bne.n	8001de0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8001dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d160      	bne.n	8001ea2 <osMessageQueueNew+0xfe>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d05d      	beq.n	8001ea2 <osMessageQueueNew+0xfe>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05a      	beq.n	8001ea2 <osMessageQueueNew+0xfe>
    mem = -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d029      	beq.n	8001e4c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <osMessageQueueNew+0x82>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b47      	cmp	r3, #71	; 0x47
 8001e06:	d90e      	bls.n	8001e26 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d302      	bcc.n	8001e26 <osMessageQueueNew+0x82>
        mem = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	e014      	b.n	8001e50 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <osMessageQueueNew+0xac>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <osMessageQueueNew+0xac>
          mem = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e001      	b.n	8001e50 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10c      	bne.n	8001e70 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	460b      	mov	r3, r1
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa58 	bl	800231c <xQueueGenericCreateStatic>
 8001e6c:	6278      	str	r0, [r7, #36]	; 0x24
 8001e6e:	e008      	b.n	8001e82 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001e76:	2200      	movs	r2, #0
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fac0 	bl	8002400 <xQueueGenericCreate>
 8001e80:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <osMessageQueueNew+0xf2>
        name = attr->name;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e001      	b.n	8001e9a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001e9a:	69f9      	ldr	r1, [r7, #28]
 8001e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e9e:	f000 ff03 	bl	8002ca8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000028 	.word	0x20000028

08001eb0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec8:	f3ef 8305 	mrs	r3, IPSR
 8001ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ece:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <osMessageQueuePut+0x44>
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <osMessageQueuePut+0xe0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d12e      	bne.n	8001f46 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8001eec:	617b      	str	r3, [r7, #20]
  return(result);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d028      	beq.n	8001f46 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <osMessageQueuePut+0x56>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <osMessageQueuePut+0x56>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8001f06:	f06f 0303 	mvn.w	r3, #3
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f0c:	e039      	b.n	8001f82 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001f12:	f107 0210 	add.w	r2, r7, #16
 8001f16:	2300      	movs	r3, #0
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6a38      	ldr	r0, [r7, #32]
 8001f1c:	f000 fbc6 	bl	80026ac <xQueueGenericSendFromISR>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d003      	beq.n	8001f2e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8001f26:	f06f 0302 	mvn.w	r3, #2
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f2c:	e029      	b.n	8001f82 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d026      	beq.n	8001f82 <osMessageQueuePut+0xd2>
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <osMessageQueuePut+0xe4>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f44:	e01d      	b.n	8001f82 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <osMessageQueuePut+0xa2>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8001f52:	f06f 0303 	mvn.w	r3, #3
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e014      	b.n	8001f84 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	6a38      	ldr	r0, [r7, #32]
 8001f62:	f000 faa9 	bl	80024b8 <xQueueGenericSend>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d00b      	beq.n	8001f84 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8001f72:	f06f 0301 	mvn.w	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e004      	b.n	8001f84 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8001f7a:	f06f 0302 	mvn.w	r3, #2
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e000      	b.n	8001f84 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f82:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000028 	.word	0x20000028
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fae:	f3ef 8305 	mrs	r3, IPSR
 8001fb2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fb4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fba:	f3ef 8310 	mrs	r3, PRIMASK
 8001fbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <osMessageQueueGet+0x42>
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <osMessageQueueGet+0xdc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d12e      	bne.n	800202c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fce:	f3ef 8311 	mrs	r3, BASEPRI
 8001fd2:	617b      	str	r3, [r7, #20]
  return(result);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d028      	beq.n	800202c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <osMessageQueueGet+0x54>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <osMessageQueueGet+0x54>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8001fec:	f06f 0303 	mvn.w	r3, #3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ff2:	e038      	b.n	8002066 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	6a38      	ldr	r0, [r7, #32]
 8002002:	f000 fcc3 	bl	800298c <xQueueReceiveFromISR>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d003      	beq.n	8002014 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800200c:	f06f 0302 	mvn.w	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002012:	e028      	b.n	8002066 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d025      	beq.n	8002066 <osMessageQueueGet+0xce>
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <osMessageQueueGet+0xe0>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800202a:	e01c      	b.n	8002066 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <osMessageQueueGet+0xa0>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002038:	f06f 0303 	mvn.w	r3, #3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e013      	b.n	8002068 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	6a38      	ldr	r0, [r7, #32]
 8002046:	f000 fbc5 	bl	80027d4 <xQueueReceive>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d00b      	beq.n	8002068 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002056:	f06f 0301 	mvn.w	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	e004      	b.n	8002068 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800205e:	f06f 0302 	mvn.w	r3, #2
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	e000      	b.n	8002068 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002066:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800206a:	4618      	mov	r0, r3
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000028 	.word	0x20000028
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800208c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <vApplicationGetIdleTaskMemory+0x30>)
 8002092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000002c 	.word	0x2000002c
 80020ac:	20000080 	.word	0x20000080

080020b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <vApplicationGetTimerTaskMemory+0x2c>)
 80020c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <vApplicationGetTimerTaskMemory+0x30>)
 80020c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20000280 	.word	0x20000280
 80020e0:	200002d4 	.word	0x200002d4

080020e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0208 	add.w	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d103      	bne.n	80021a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00c      	b.n	80021c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3308      	adds	r3, #8
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e002      	b.n	80021b4 <vListInsert+0x2e>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d2f6      	bcs.n	80021ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6852      	ldr	r2, [r2, #4]
 8002218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d103      	bne.n	800222c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1e5a      	subs	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	e7fe      	b.n	8002272 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002274:	f002 f86a 	bl	800434c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	441a      	add	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	3b01      	subs	r3, #1
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3310      	adds	r3, #16
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f984 	bl	80035e4 <xTaskRemoveFromEventList>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <xQueueGenericReset+0xcc>)
 80022e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	e009      	b.n	8002308 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3310      	adds	r3, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fef3 	bl	80020e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3324      	adds	r3, #36	; 0x24
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff feee 	bl	80020e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002308:	f002 f84e 	bl	80043a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000ed04 	.word	0xe000ed04

0800231c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <xQueueGenericCreateStatic+0x28>
 8002330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
 8002342:	e7fe      	b.n	8002342 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <xQueueGenericCreateStatic+0x42>
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	e7fe      	b.n	800235c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <xQueueGenericCreateStatic+0x4e>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <xQueueGenericCreateStatic+0x52>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <xQueueGenericCreateStatic+0x54>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <xQueueGenericCreateStatic+0x6c>
 8002374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	e7fe      	b.n	8002386 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <xQueueGenericCreateStatic+0x78>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <xQueueGenericCreateStatic+0x7c>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <xQueueGenericCreateStatic+0x7e>
 8002398:	2300      	movs	r3, #0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <xQueueGenericCreateStatic+0x96>
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023b2:	2348      	movs	r3, #72	; 0x48
 80023b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b48      	cmp	r3, #72	; 0x48
 80023ba:	d009      	beq.n	80023d0 <xQueueGenericCreateStatic+0xb4>
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e7fe      	b.n	80023ce <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f842 	bl	800247a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3730      	adds	r7, #48	; 0x30
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <xQueueGenericCreate+0x28>
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e7fe      	b.n	8002426 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e004      	b.n	800243e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3348      	adds	r3, #72	; 0x48
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f89c 	bl	8004580 <pvPortMalloc>
 8002448:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00f      	beq.n	8002470 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3348      	adds	r3, #72	; 0x48
 8002454:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f805 	bl	800247a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002470:	69bb      	ldr	r3, [r7, #24]
	}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e002      	b.n	800249c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024a8:	2101      	movs	r1, #1
 80024aa:	69b8      	ldr	r0, [r7, #24]
 80024ac:	f7ff fece 	bl	800224c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	; 0x38
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <xQueueGenericSend+0x30>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e6:	e7fe      	b.n	80024e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <xQueueGenericSend+0x3e>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0x42>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0x44>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <xQueueGenericSend+0x5c>
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	e7fe      	b.n	8002512 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d103      	bne.n	8002522 <xQueueGenericSend+0x6a>
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <xQueueGenericSend+0x6e>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueGenericSend+0x70>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <xQueueGenericSend+0x88>
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	e7fe      	b.n	800253e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002540:	f001 fa0c 	bl	800395c <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <xQueueGenericSend+0x98>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <xQueueGenericSend+0x9c>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <xQueueGenericSend+0x9e>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <xQueueGenericSend+0xb6>
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800256e:	f001 feed 	bl	800434c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <xQueueGenericSend+0xcc>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d129      	bne.n	80025d8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa7c 	bl	8002a86 <prvCopyDataToQueue>
 800258e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f821 	bl	80035e4 <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <xQueueGenericSend+0x1f0>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	e00a      	b.n	80025d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <xQueueGenericSend+0x1f0>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d0:	f001 feea 	bl	80043a8 <vPortExitCritical>
				return pdPASS;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e063      	b.n	80026a0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025de:	f001 fee3 	bl	80043a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e05c      	b.n	80026a0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f859 	bl	80036a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025fa:	f001 fed5 	bl	80043a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025fe:	f000 fdcf 	bl	80031a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002602:	f001 fea3 	bl	800434c <vPortEnterCritical>
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260c:	b25b      	sxtb	r3, r3
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x164>
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x17a>
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002632:	f001 feb9 	bl	80043a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f848 	bl	80036d4 <xTaskCheckForTimeOut>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d124      	bne.n	8002694 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 fb13 	bl	8002c76 <prvIsQueueFull>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	3310      	adds	r3, #16
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 ff72 	bl	8003548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 fa9e 	bl	8002ba6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800266a:	f000 fda7 	bl	80031bc <xTaskResumeAll>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f af7c 	bne.w	800256e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <xQueueGenericSend+0x1f0>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e772      	b.n	800256e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268a:	f000 fa8c 	bl	8002ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268e:	f000 fd95 	bl	80031bc <xTaskResumeAll>
 8002692:	e76c      	b.n	800256e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 fa86 	bl	8002ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269a:	f000 fd8f 	bl	80031bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
		}
	}
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <xQueueGenericSendFromISR+0x2c>
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	e7fe      	b.n	80026d6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <xQueueGenericSendFromISR+0x3a>
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <xQueueGenericSendFromISR+0x3e>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <xQueueGenericSendFromISR+0x40>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <xQueueGenericSendFromISR+0x58>
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	e7fe      	b.n	8002702 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d103      	bne.n	8002712 <xQueueGenericSendFromISR+0x66>
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <xQueueGenericSendFromISR+0x6a>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueGenericSendFromISR+0x6c>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <xQueueGenericSendFromISR+0x84>
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e7fe      	b.n	800272e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002730:	f001 fee8 	bl	8004504 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002734:	f3ef 8211 	mrs	r2, BASEPRI
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	61ba      	str	r2, [r7, #24]
 800274a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800274c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	429a      	cmp	r2, r3
 800275a:	d302      	bcc.n	8002762 <xQueueGenericSendFromISR+0xb6>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d12c      	bne.n	80027bc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002772:	f000 f988 	bl	8002a86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002776:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d112      	bne.n	80027a6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d016      	beq.n	80027b6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	3324      	adds	r3, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f000 ff29 	bl	80035e4 <xTaskRemoveFromEventList>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e007      	b.n	80027b6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	b25a      	sxtb	r2, r3
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027b6:	2301      	movs	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027ba:	e001      	b.n	80027c0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3738      	adds	r7, #56	; 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <xQueueReceive+0x2e>
	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	e7fe      	b.n	8002800 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <xQueueReceive+0x3c>
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <xQueueReceive+0x40>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <xQueueReceive+0x42>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <xQueueReceive+0x5a>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	e7fe      	b.n	800282c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800282e:	f001 f895 	bl	800395c <xTaskGetSchedulerState>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <xQueueReceive+0x6a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <xQueueReceive+0x6e>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueReceive+0x70>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <xQueueReceive+0x88>
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e7fe      	b.n	800285a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800285c:	f001 fd76 	bl	800434c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01f      	beq.n	80028ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002870:	f000 f973 	bl	8002b5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	3310      	adds	r3, #16
 8002888:	4618      	mov	r0, r3
 800288a:	f000 feab 	bl	80035e4 <xTaskRemoveFromEventList>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002894:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <xQueueReceive+0x1b4>)
 8002896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028a4:	f001 fd80 	bl	80043a8 <vPortExitCritical>
				return pdPASS;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e069      	b.n	8002980 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028b2:	f001 fd79 	bl	80043a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e062      	b.n	8002980 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 feef 	bl	80036a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ce:	f001 fd6b 	bl	80043a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028d2:	f000 fc65 	bl	80031a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d6:	f001 fd39 	bl	800434c <vPortEnterCritical>
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d103      	bne.n	80028f0 <xQueueReceive+0x11c>
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d103      	bne.n	8002906 <xQueueReceive+0x132>
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002906:	f001 fd4f 	bl	80043a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800290a:	1d3a      	adds	r2, r7, #4
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fede 	bl	80036d4 <xTaskCheckForTimeOut>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d123      	bne.n	8002966 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800291e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002920:	f000 f993 	bl	8002c4a <prvIsQueueEmpty>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	3324      	adds	r3, #36	; 0x24
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fe08 	bl	8003548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293a:	f000 f934 	bl	8002ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800293e:	f000 fc3d 	bl	80031bc <xTaskResumeAll>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d189      	bne.n	800285c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <xQueueReceive+0x1b4>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e780      	b.n	800285c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800295a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295c:	f000 f923 	bl	8002ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002960:	f000 fc2c 	bl	80031bc <xTaskResumeAll>
 8002964:	e77a      	b.n	800285c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002968:	f000 f91d 	bl	8002ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800296c:	f000 fc26 	bl	80031bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 f96a 	bl	8002c4a <prvIsQueueEmpty>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	f43f af6f 	beq.w	800285c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800297e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	; 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	; 0x38
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <xQueueReceiveFromISR+0x2a>
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	e7fe      	b.n	80029b4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <xQueueReceiveFromISR+0x38>
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <xQueueReceiveFromISR+0x3c>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <xQueueReceiveFromISR+0x3e>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <xQueueReceiveFromISR+0x56>
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	e7fe      	b.n	80029e0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029e2:	f001 fd8f 	bl	8004504 <vPortValidateInterruptPriority>
	__asm volatile
 80029e6:	f3ef 8211 	mrs	r2, BASEPRI
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	61ba      	str	r2, [r7, #24]
 80029fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80029fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02f      	beq.n	8002a6e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a1c:	f000 f89d 	bl	8002b5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d112      	bne.n	8002a58 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	3310      	adds	r3, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fdd0 	bl	80035e4 <xTaskRemoveFromEventList>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e007      	b.n	8002a68 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	b25a      	sxtb	r2, r3
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6c:	e001      	b.n	8002a72 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3738      	adds	r7, #56	; 0x38
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d14d      	bne.n	8002b48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 ff71 	bl	8003998 <xTaskPriorityDisinherit>
 8002ab6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	e043      	b.n	8002b48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d119      	bne.n	8002afa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6898      	ldr	r0, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	f002 fa7b 	bl	8004fcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	441a      	add	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d32b      	bcc.n	8002b48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e026      	b.n	8002b48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68d8      	ldr	r0, [r3, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	461a      	mov	r2, r3
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	f002 fa61 	bl	8004fcc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	425b      	negs	r3, r3
 8002b14:	441a      	add	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d207      	bcs.n	8002b36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	425b      	negs	r3, r3
 8002b30:	441a      	add	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d105      	bne.n	8002b48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b50:	697b      	ldr	r3, [r7, #20]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d018      	beq.n	8002b9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d303      	bcc.n	8002b8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68d9      	ldr	r1, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	461a      	mov	r2, r3
 8002b98:	6838      	ldr	r0, [r7, #0]
 8002b9a:	f002 fa17 	bl	8004fcc <memcpy>
	}
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bae:	f001 fbcd 	bl	800434c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bba:	e011      	b.n	8002be0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fd0b 	bl	80035e4 <xTaskRemoveFromEventList>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bd4:	f000 fdde 	bl	8003794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	dce9      	bgt.n	8002bbc <prvUnlockQueue+0x16>
 8002be8:	e000      	b.n	8002bec <prvUnlockQueue+0x46>
					break;
 8002bea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	22ff      	movs	r2, #255	; 0xff
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002bf4:	f001 fbd8 	bl	80043a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bf8:	f001 fba8 	bl	800434c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c04:	e011      	b.n	8002c2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3310      	adds	r3, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fce6 	bl	80035e4 <xTaskRemoveFromEventList>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c1e:	f000 fdb9 	bl	8003794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	dce9      	bgt.n	8002c06 <prvUnlockQueue+0x60>
 8002c32:	e000      	b.n	8002c36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c3e:	f001 fbb3 	bl	80043a8 <vPortExitCritical>
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c52:	f001 fb7b 	bl	800434c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e001      	b.n	8002c68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c68:	f001 fb9e 	bl	80043a8 <vPortExitCritical>

	return xReturn;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c7e:	f001 fb65 	bl	800434c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d102      	bne.n	8002c94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e001      	b.n	8002c98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c98:	f001 fb86 	bl	80043a8 <vPortExitCritical>

	return xReturn;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e014      	b.n	8002ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <vQueueAddToRegistry+0x4c>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <vQueueAddToRegistry+0x4c>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <vQueueAddToRegistry+0x4c>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cda:	e005      	b.n	8002ce8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d9e7      	bls.n	8002cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	200048f4 	.word	0x200048f4

08002cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d08:	f001 fb20 	bl	800434c <vPortEnterCritical>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d103      	bne.n	8002d22 <vQueueWaitForMessageRestricted+0x2a>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d103      	bne.n	8002d38 <vQueueWaitForMessageRestricted+0x40>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d38:	f001 fb36 	bl	80043a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fc1f 	bl	8003590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff27 	bl	8002ba6 <prvUnlockQueue>
	}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <xTaskCreateStatic+0x28>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	e7fe      	b.n	8002d86 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <xTaskCreateStatic+0x42>
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e7fe      	b.n	8002da0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002da2:	2354      	movs	r3, #84	; 0x54
 8002da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b54      	cmp	r3, #84	; 0x54
 8002daa:	d009      	beq.n	8002dc0 <xTaskCreateStatic+0x60>
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e7fe      	b.n	8002dbe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01e      	beq.n	8002e04 <xTaskCreateStatic+0xa4>
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dde:	2300      	movs	r3, #0
 8002de0:	9303      	str	r3, [sp, #12]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	9302      	str	r3, [sp, #8]
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f850 	bl	8002e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dfe:	f000 f8cb 	bl	8002f98 <prvAddNewTaskToReadyList>
 8002e02:	e001      	b.n	8002e08 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e08:	697b      	ldr	r3, [r7, #20]
	}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08c      	sub	sp, #48	; 0x30
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fbaa 	bl	8004580 <pvPortMalloc>
 8002e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e34:	2054      	movs	r0, #84	; 0x54
 8002e36:	f001 fba3 	bl	8004580 <pvPortMalloc>
 8002e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	e005      	b.n	8002e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f001 fc5a 	bl	8004704 <vPortFree>
 8002e50:	e001      	b.n	8002e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9303      	str	r3, [sp, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f80e 	bl	8002e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e80:	69f8      	ldr	r0, [r7, #28]
 8002e82:	f000 f889 	bl	8002f98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e002      	b.n	8002e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e92:	69bb      	ldr	r3, [r7, #24]
	}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f023 0307 	bic.w	r3, r3, #7
 8002ec2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <prvInitialiseNewTask+0x46>
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e7fe      	b.n	8002ee0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e012      	b.n	8002f0e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	7819      	ldrb	r1, [r3, #0]
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3334      	adds	r3, #52	; 0x34
 8002ef8:	460a      	mov	r2, r1
 8002efa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d9e9      	bls.n	8002ee8 <prvInitialiseNewTask+0x4c>
 8002f14:	e000      	b.n	8002f18 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002f16:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	2b37      	cmp	r3, #55	; 0x37
 8002f24:	d901      	bls.n	8002f2a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f26:	2337      	movs	r3, #55	; 0x37
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	2200      	movs	r2, #0
 8002f3a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f8ef 	bl	8002124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	3318      	adds	r3, #24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f8ea 	bl	8002124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	69b8      	ldr	r0, [r7, #24]
 8002f7a:	f001 f8bd 	bl	80040f8 <pxPortInitialiseStack>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f90:	bf00      	nop
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fa0:	f001 f9d4 	bl	800434c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <prvAddNewTaskToReadyList+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <prvAddNewTaskToReadyList+0xbc>)
 8002fac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <prvAddNewTaskToReadyList+0xc0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fb6:	4a28      	ldr	r2, [pc, #160]	; (8003058 <prvAddNewTaskToReadyList+0xc0>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <prvAddNewTaskToReadyList+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d110      	bne.n	8002fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fc4:	f000 fc0a 	bl	80037dc <prvInitialiseTaskLists>
 8002fc8:	e00d      	b.n	8002fe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <prvAddNewTaskToReadyList+0xc4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <prvAddNewTaskToReadyList+0xc0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d802      	bhi.n	8002fe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <prvAddNewTaskToReadyList+0xc0>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <prvAddNewTaskToReadyList+0xc8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <prvAddNewTaskToReadyList+0xc8>)
 8002fee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <prvAddNewTaskToReadyList+0xcc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d903      	bls.n	8003004 <prvAddNewTaskToReadyList+0x6c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <prvAddNewTaskToReadyList+0xcc>)
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <prvAddNewTaskToReadyList+0xd0>)
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7ff f88f 	bl	800213e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003020:	f001 f9c2 	bl	80043a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <prvAddNewTaskToReadyList+0xc4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <prvAddNewTaskToReadyList+0xc0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	429a      	cmp	r2, r3
 8003038:	d207      	bcs.n	800304a <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <prvAddNewTaskToReadyList+0xd4>)
 800303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000ba8 	.word	0x20000ba8
 8003058:	200006d4 	.word	0x200006d4
 800305c:	20000bb4 	.word	0x20000bb4
 8003060:	20000bc4 	.word	0x20000bc4
 8003064:	20000bb0 	.word	0x20000bb0
 8003068:	200006d8 	.word	0x200006d8
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <vTaskDelay+0x60>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <vTaskDelay+0x2e>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	e7fe      	b.n	800309c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800309e:	f000 f87f 	bl	80031a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030a2:	2100      	movs	r1, #0
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fce3 	bl	8003a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030aa:	f000 f887 	bl	80031bc <xTaskResumeAll>
 80030ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <vTaskDelay+0x64>)
 80030b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000bd0 	.word	0x20000bd0
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030e6:	463a      	mov	r2, r7
 80030e8:	1d39      	adds	r1, r7, #4
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ffc4 	bl	800207c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	460a      	mov	r2, r1
 8003106:	4920      	ldr	r1, [pc, #128]	; (8003188 <vTaskStartScheduler+0xb0>)
 8003108:	4820      	ldr	r0, [pc, #128]	; (800318c <vTaskStartScheduler+0xb4>)
 800310a:	f7ff fe29 	bl	8002d60 <xTaskCreateStatic>
 800310e:	4602      	mov	r2, r0
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <vTaskStartScheduler+0xb8>)
 8003112:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <vTaskStartScheduler+0xb8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e001      	b.n	8003126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800312c:	f000 fcf4 	bl	8003b18 <xTimerCreateTimerTask>
 8003130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d115      	bne.n	8003164 <vTaskStartScheduler+0x8c>
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <vTaskStartScheduler+0xbc>)
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <vTaskStartScheduler+0xc0>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <vTaskStartScheduler+0xc4>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800315e:	f001 f857 	bl	8004210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003162:	e00d      	b.n	8003180 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d109      	bne.n	8003180 <vTaskStartScheduler+0xa8>
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e7fe      	b.n	800317e <vTaskStartScheduler+0xa6>
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	0800500c 	.word	0x0800500c
 800318c:	080037ad 	.word	0x080037ad
 8003190:	20000bcc 	.word	0x20000bcc
 8003194:	20000bc8 	.word	0x20000bc8
 8003198:	20000bb4 	.word	0x20000bb4
 800319c:	20000bac 	.word	0x20000bac

080031a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000bd0 	.word	0x20000bd0

080031bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <xTaskResumeAll+0x114>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <xTaskResumeAll+0x2a>
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	e7fe      	b.n	80031e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031e6:	f001 f8b1 	bl	800434c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031ea:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <xTaskResumeAll+0x114>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <xTaskResumeAll+0x114>)
 80031f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <xTaskResumeAll+0x114>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d162      	bne.n	80032c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <xTaskResumeAll+0x118>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05e      	beq.n	80032c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003204:	e02f      	b.n	8003266 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <xTaskResumeAll+0x11c>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3318      	adds	r3, #24
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fff0 	bl	80021f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3304      	adds	r3, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe ffeb 	bl	80021f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <xTaskResumeAll+0x120>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d903      	bls.n	8003236 <xTaskResumeAll+0x7a>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <xTaskResumeAll+0x120>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <xTaskResumeAll+0x124>)
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fe ff76 	bl	800213e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <xTaskResumeAll+0x128>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <xTaskResumeAll+0x12c>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <xTaskResumeAll+0x11c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cb      	bne.n	8003206 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003274:	f000 fb4c 	bl	8003910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <xTaskResumeAll+0x130>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003284:	f000 f846 	bl	8003314 <xTaskIncrementTick>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <xTaskResumeAll+0x12c>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <xTaskResumeAll+0x130>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <xTaskResumeAll+0x12c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <xTaskResumeAll+0x134>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032c2:	f001 f871 	bl	80043a8 <vPortExitCritical>

	return xAlreadyYielded;
 80032c6:	68bb      	ldr	r3, [r7, #8]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000bd0 	.word	0x20000bd0
 80032d4:	20000ba8 	.word	0x20000ba8
 80032d8:	20000b68 	.word	0x20000b68
 80032dc:	20000bb0 	.word	0x20000bb0
 80032e0:	200006d8 	.word	0x200006d8
 80032e4:	200006d4 	.word	0x200006d4
 80032e8:	20000bbc 	.word	0x20000bbc
 80032ec:	20000bb8 	.word	0x20000bb8
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <xTaskGetTickCount+0x1c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003300:	687b      	ldr	r3, [r7, #4]
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000bac 	.word	0x20000bac

08003314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <xTaskIncrementTick+0x150>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 808d 	bne.w	8003442 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <xTaskIncrementTick+0x154>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003330:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <xTaskIncrementTick+0x154>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11f      	bne.n	800337c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800333c:	4b4b      	ldr	r3, [pc, #300]	; (800346c <xTaskIncrementTick+0x158>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <xTaskIncrementTick+0x46>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	e7fe      	b.n	8003358 <xTaskIncrementTick+0x44>
 800335a:	4b44      	ldr	r3, [pc, #272]	; (800346c <xTaskIncrementTick+0x158>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	4b43      	ldr	r3, [pc, #268]	; (8003470 <xTaskIncrementTick+0x15c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a41      	ldr	r2, [pc, #260]	; (800346c <xTaskIncrementTick+0x158>)
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4a41      	ldr	r2, [pc, #260]	; (8003470 <xTaskIncrementTick+0x15c>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <xTaskIncrementTick+0x160>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	4a3f      	ldr	r2, [pc, #252]	; (8003474 <xTaskIncrementTick+0x160>)
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	f000 faca 	bl	8003910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800337c:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <xTaskIncrementTick+0x164>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d34e      	bcc.n	8003424 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <xTaskIncrementTick+0x158>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <xTaskIncrementTick+0x80>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <xTaskIncrementTick+0x82>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <xTaskIncrementTick+0x164>)
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	601a      	str	r2, [r3, #0]
					break;
 80033a2:	e03f      	b.n	8003424 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <xTaskIncrementTick+0x158>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d203      	bcs.n	80033c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033bc:	4a2e      	ldr	r2, [pc, #184]	; (8003478 <xTaskIncrementTick+0x164>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
						break;
 80033c2:	e02f      	b.n	8003424 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe ff15 	bl	80021f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3318      	adds	r3, #24
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe ff0c 	bl	80021f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <xTaskIncrementTick+0x168>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d903      	bls.n	80033f4 <xTaskIncrementTick+0xe0>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <xTaskIncrementTick+0x168>)
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <xTaskIncrementTick+0x16c>)
 8003402:	441a      	add	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7fe fe97 	bl	800213e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <xTaskIncrementTick+0x170>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	429a      	cmp	r2, r3
 800341c:	d3b3      	bcc.n	8003386 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800341e:	2301      	movs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003422:	e7b0      	b.n	8003386 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003424:	4b17      	ldr	r3, [pc, #92]	; (8003484 <xTaskIncrementTick+0x170>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	4915      	ldr	r1, [pc, #84]	; (8003480 <xTaskIncrementTick+0x16c>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d907      	bls.n	800344c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e004      	b.n	800344c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <xTaskIncrementTick+0x174>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <xTaskIncrementTick+0x174>)
 800344a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <xTaskIncrementTick+0x178>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003458:	697b      	ldr	r3, [r7, #20]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000bd0 	.word	0x20000bd0
 8003468:	20000bac 	.word	0x20000bac
 800346c:	20000b60 	.word	0x20000b60
 8003470:	20000b64 	.word	0x20000b64
 8003474:	20000bc0 	.word	0x20000bc0
 8003478:	20000bc8 	.word	0x20000bc8
 800347c:	20000bb0 	.word	0x20000bb0
 8003480:	200006d8 	.word	0x200006d8
 8003484:	200006d4 	.word	0x200006d4
 8003488:	20000bb8 	.word	0x20000bb8
 800348c:	20000bbc 	.word	0x20000bbc

08003490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <vTaskSwitchContext+0xa4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <vTaskSwitchContext+0xa8>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034a4:	e040      	b.n	8003528 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <vTaskSwitchContext+0xa8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <vTaskSwitchContext+0xac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e00f      	b.n	80034d4 <vTaskSwitchContext+0x44>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <vTaskSwitchContext+0x3e>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e7fe      	b.n	80034cc <vTaskSwitchContext+0x3c>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	491a      	ldr	r1, [pc, #104]	; (8003540 <vTaskSwitchContext+0xb0>)
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0e5      	beq.n	80034b4 <vTaskSwitchContext+0x24>
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <vTaskSwitchContext+0xb0>)
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3308      	adds	r3, #8
 800350a:	429a      	cmp	r2, r3
 800350c:	d104      	bne.n	8003518 <vTaskSwitchContext+0x88>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <vTaskSwitchContext+0xb4>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <vTaskSwitchContext+0xac>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	20000bd0 	.word	0x20000bd0
 8003538:	20000bbc 	.word	0x20000bbc
 800353c:	20000bb0 	.word	0x20000bb0
 8003540:	200006d8 	.word	0x200006d8
 8003544:	200006d4 	.word	0x200006d4

08003548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <vTaskPlaceOnEventList+0x24>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e7fe      	b.n	800356a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <vTaskPlaceOnEventList+0x44>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3318      	adds	r3, #24
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe fe06 	bl	8002186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800357a:	2101      	movs	r1, #1
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f000 fa77 	bl	8003a70 <prvAddCurrentTaskToDelayedList>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200006d4 	.word	0x200006d4

08003590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <vTaskPlaceOnEventListRestricted+0x26>
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e7fe      	b.n	80035b4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <vTaskPlaceOnEventListRestricted+0x50>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3318      	adds	r3, #24
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7fe fdbd 	bl	800213e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	f000 fa4c 	bl	8003a70 <prvAddCurrentTaskToDelayedList>
	}
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200006d4 	.word	0x200006d4

080035e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xTaskRemoveFromEventList+0x2a>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e7fe      	b.n	800360c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3318      	adds	r3, #24
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fdf0 	bl	80021f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <xTaskRemoveFromEventList+0xac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11d      	bne.n	800365c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3304      	adds	r3, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fde7 	bl	80021f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <xTaskRemoveFromEventList+0xb0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d903      	bls.n	800363e <xTaskRemoveFromEventList+0x5a>
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	4a16      	ldr	r2, [pc, #88]	; (8003694 <xTaskRemoveFromEventList+0xb0>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a13      	ldr	r2, [pc, #76]	; (8003698 <xTaskRemoveFromEventList+0xb4>)
 800364c:	441a      	add	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f7fe fd72 	bl	800213e <vListInsertEnd>
 800365a:	e005      	b.n	8003668 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	3318      	adds	r3, #24
 8003660:	4619      	mov	r1, r3
 8003662:	480e      	ldr	r0, [pc, #56]	; (800369c <xTaskRemoveFromEventList+0xb8>)
 8003664:	f7fe fd6b 	bl	800213e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <xTaskRemoveFromEventList+0xbc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	429a      	cmp	r2, r3
 8003674:	d905      	bls.n	8003682 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003676:	2301      	movs	r3, #1
 8003678:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <xTaskRemoveFromEventList+0xc0>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e001      	b.n	8003686 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003686:	697b      	ldr	r3, [r7, #20]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000bd0 	.word	0x20000bd0
 8003694:	20000bb0 	.word	0x20000bb0
 8003698:	200006d8 	.word	0x200006d8
 800369c:	20000b68 	.word	0x20000b68
 80036a0:	200006d4 	.word	0x200006d4
 80036a4:	20000bbc 	.word	0x20000bbc

080036a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <vTaskInternalSetTimeOutState+0x24>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <vTaskInternalSetTimeOutState+0x28>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	605a      	str	r2, [r3, #4]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000bc0 	.word	0x20000bc0
 80036d0:	20000bac 	.word	0x20000bac

080036d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xTaskCheckForTimeOut+0x24>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e7fe      	b.n	80036f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <xTaskCheckForTimeOut+0x3e>
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e7fe      	b.n	8003710 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003712:	f000 fe1b 	bl	800434c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <xTaskCheckForTimeOut+0xb8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d102      	bne.n	8003736 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e023      	b.n	800377e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <xTaskCheckForTimeOut+0xbc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d007      	beq.n	8003752 <xTaskCheckForTimeOut+0x7e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e015      	b.n	800377e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d20b      	bcs.n	8003774 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff9d 	bl	80036a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e004      	b.n	800377e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f000 fe13 	bl	80043a8 <vPortExitCritical>

	return xReturn;
 8003782:	69fb      	ldr	r3, [r7, #28]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000bac 	.word	0x20000bac
 8003790:	20000bc0 	.word	0x20000bc0

08003794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <vTaskMissedYield+0x14>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000bbc 	.word	0x20000bbc

080037ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037b4:	f000 f852 	bl	800385c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <prvIdleTask+0x28>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d9f9      	bls.n	80037b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <prvIdleTask+0x2c>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037d0:	e7f0      	b.n	80037b4 <prvIdleTask+0x8>
 80037d2:	bf00      	nop
 80037d4:	200006d8 	.word	0x200006d8
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e00c      	b.n	8003802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <prvInitialiseTaskLists+0x60>)
 80037f4:	4413      	add	r3, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fc74 	bl	80020e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3301      	adds	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b37      	cmp	r3, #55	; 0x37
 8003806:	d9ef      	bls.n	80037e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <prvInitialiseTaskLists+0x64>)
 800380a:	f7fe fc6b 	bl	80020e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800380e:	480d      	ldr	r0, [pc, #52]	; (8003844 <prvInitialiseTaskLists+0x68>)
 8003810:	f7fe fc68 	bl	80020e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <prvInitialiseTaskLists+0x6c>)
 8003816:	f7fe fc65 	bl	80020e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800381a:	480c      	ldr	r0, [pc, #48]	; (800384c <prvInitialiseTaskLists+0x70>)
 800381c:	f7fe fc62 	bl	80020e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003820:	480b      	ldr	r0, [pc, #44]	; (8003850 <prvInitialiseTaskLists+0x74>)
 8003822:	f7fe fc5f 	bl	80020e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <prvInitialiseTaskLists+0x78>)
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <prvInitialiseTaskLists+0x64>)
 800382a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <prvInitialiseTaskLists+0x7c>)
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <prvInitialiseTaskLists+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200006d8 	.word	0x200006d8
 8003840:	20000b38 	.word	0x20000b38
 8003844:	20000b4c 	.word	0x20000b4c
 8003848:	20000b68 	.word	0x20000b68
 800384c:	20000b7c 	.word	0x20000b7c
 8003850:	20000b94 	.word	0x20000b94
 8003854:	20000b60 	.word	0x20000b60
 8003858:	20000b64 	.word	0x20000b64

0800385c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003862:	e019      	b.n	8003898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003864:	f000 fd72 	bl	800434c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <prvCheckTasksWaitingTermination+0x4c>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fcbf 	bl	80021f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <prvCheckTasksWaitingTermination+0x50>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3b01      	subs	r3, #1
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <prvCheckTasksWaitingTermination+0x50>)
 8003882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 800388c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800388e:	f000 fd8b 	bl	80043a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f80e 	bl	80038b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e1      	bne.n	8003864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000b7c 	.word	0x20000b7c
 80038ac:	20000ba8 	.word	0x20000ba8
 80038b0:	20000b90 	.word	0x20000b90

080038b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 ff1a 	bl	8004704 <vPortFree>
				vPortFree( pxTCB );
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 ff17 	bl	8004704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038d6:	e017      	b.n	8003908 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d103      	bne.n	80038ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ff0e 	bl	8004704 <vPortFree>
	}
 80038e8:	e00e      	b.n	8003908 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d009      	beq.n	8003908 <prvDeleteTCB+0x54>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e7fe      	b.n	8003906 <prvDeleteTCB+0x52>
	}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <prvResetNextTaskUnblockTime+0x44>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <prvResetNextTaskUnblockTime+0x14>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <prvResetNextTaskUnblockTime+0x16>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <prvResetNextTaskUnblockTime+0x48>)
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003932:	e008      	b.n	8003946 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <prvResetNextTaskUnblockTime+0x44>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <prvResetNextTaskUnblockTime+0x48>)
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000b60 	.word	0x20000b60
 8003958:	20000bc8 	.word	0x20000bc8

0800395c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <xTaskGetSchedulerState+0x34>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800396a:	2301      	movs	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	e008      	b.n	8003982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <xTaskGetSchedulerState+0x38>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003978:	2302      	movs	r3, #2
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	e001      	b.n	8003982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003982:	687b      	ldr	r3, [r7, #4]
	}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20000bb4 	.word	0x20000bb4
 8003994:	20000bd0 	.word	0x20000bd0

08003998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d054      	beq.n	8003a58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <xTaskPriorityDisinherit+0xcc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d009      	beq.n	80039cc <xTaskPriorityDisinherit+0x34>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e7fe      	b.n	80039ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <xTaskPriorityDisinherit+0x50>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	e7fe      	b.n	80039e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d02c      	beq.n	8003a58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d128      	bne.n	8003a58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fbf4 	bl	80021f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <xTaskPriorityDisinherit+0xd0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d903      	bls.n	8003a38 <xTaskPriorityDisinherit+0xa0>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <xTaskPriorityDisinherit+0xd0>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <xTaskPriorityDisinherit+0xd4>)
 8003a46:	441a      	add	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe fb75 	bl	800213e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a58:	697b      	ldr	r3, [r7, #20]
	}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200006d4 	.word	0x200006d4
 8003a68:	20000bb0 	.word	0x20000bb0
 8003a6c:	200006d8 	.word	0x200006d8

08003a70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a7a:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fbb6 	bl	80021f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d10a      	bne.n	8003aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4819      	ldr	r0, [pc, #100]	; (8003b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8003aa4:	f7fe fb4b 	bl	800213e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aa8:	e026      	b.n	8003af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d209      	bcs.n	8003ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7fe fb59 	bl	8002186 <vListInsert>
}
 8003ad4:	e010      	b.n	8003af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fe fb4f 	bl	8002186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d202      	bcs.n	8003af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000bac 	.word	0x20000bac
 8003b04:	200006d4 	.word	0x200006d4
 8003b08:	20000b94 	.word	0x20000b94
 8003b0c:	20000b64 	.word	0x20000b64
 8003b10:	20000b60 	.word	0x20000b60
 8003b14:	20000bc8 	.word	0x20000bc8

08003b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b22:	f000 faa9 	bl	8004078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <xTimerCreateTimerTask+0x80>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d021      	beq.n	8003b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b36:	1d3a      	adds	r2, r7, #4
 8003b38:	f107 0108 	add.w	r1, r7, #8
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fab5 	bl	80020b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	9202      	str	r2, [sp, #8]
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	2302      	movs	r3, #2
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	460a      	mov	r2, r1
 8003b58:	4910      	ldr	r1, [pc, #64]	; (8003b9c <xTimerCreateTimerTask+0x84>)
 8003b5a:	4811      	ldr	r0, [pc, #68]	; (8003ba0 <xTimerCreateTimerTask+0x88>)
 8003b5c:	f7ff f900 	bl	8002d60 <xTaskCreateStatic>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <xTimerCreateTimerTask+0x8c>)
 8003b64:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <xTimerCreateTimerTask+0x8c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <xTimerCreateTimerTask+0x74>
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e7fe      	b.n	8003b8a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003b8c:	697b      	ldr	r3, [r7, #20]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000c04 	.word	0x20000c04
 8003b9c:	08005014 	.word	0x08005014
 8003ba0:	08003cc1 	.word	0x08003cc1
 8003ba4:	20000c08 	.word	0x20000c08

08003ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <xTimerGenericCommand+0x2c>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	e7fe      	b.n	8003bd2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <xTimerGenericCommand+0x94>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02a      	beq.n	8003c32 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	dc18      	bgt.n	8003c20 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bee:	f7ff feb5 	bl	800395c <xTaskGetSchedulerState>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d109      	bne.n	8003c0c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <xTimerGenericCommand+0x94>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0114 	add.w	r1, r7, #20
 8003c00:	2300      	movs	r3, #0
 8003c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c04:	f7fe fc58 	bl	80024b8 <xQueueGenericSend>
 8003c08:	6278      	str	r0, [r7, #36]	; 0x24
 8003c0a:	e012      	b.n	8003c32 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <xTimerGenericCommand+0x94>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f107 0114 	add.w	r1, r7, #20
 8003c14:	2300      	movs	r3, #0
 8003c16:	2200      	movs	r2, #0
 8003c18:	f7fe fc4e 	bl	80024b8 <xQueueGenericSend>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24
 8003c1e:	e008      	b.n	8003c32 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <xTimerGenericCommand+0x94>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	f107 0114 	add.w	r1, r7, #20
 8003c28:	2300      	movs	r3, #0
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	f7fe fd3e 	bl	80026ac <xQueueGenericSendFromISR>
 8003c30:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000c04 	.word	0x20000c04

08003c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c4a:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <prvProcessExpiredTimer+0x7c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe facd 	bl	80021f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d121      	bne.n	8003caa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	18d1      	adds	r1, r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f000 f8c8 	bl	8003e08 <prvInsertTimerInActiveList>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	2100      	movs	r1, #0
 8003c88:	6978      	ldr	r0, [r7, #20]
 8003c8a:	f7ff ff8d 	bl	8003ba8 <xTimerGenericCommand>
 8003c8e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <prvProcessExpiredTimer+0x6a>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e7fe      	b.n	8003ca8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	4798      	blx	r3
}
 8003cb2:	bf00      	nop
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000bfc 	.word	0x20000bfc

08003cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f857 	bl	8003d80 <prvGetNextExpireTime>
 8003cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f803 	bl	8003ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cde:	f000 f8d5 	bl	8003e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ce2:	e7f1      	b.n	8003cc8 <prvTimerTask+0x8>

08003ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cee:	f7ff fa57 	bl	80031a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f866 	bl	8003dc8 <prvSampleTimeNow>
 8003cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d130      	bne.n	8003d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <prvProcessTimerOrBlockTask+0x3c>
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d806      	bhi.n	8003d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d12:	f7ff fa53 	bl	80031bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff91 	bl	8003c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d1e:	e024      	b.n	8003d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <prvProcessTimerOrBlockTask+0x90>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <prvProcessTimerOrBlockTask+0x94>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4619      	mov	r1, r3
 8003d46:	f7fe ffd7 	bl	8002cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d4a:	f7ff fa37 	bl	80031bc <xTaskResumeAll>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <prvProcessTimerOrBlockTask+0x98>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
}
 8003d64:	e001      	b.n	8003d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d66:	f7ff fa29 	bl	80031bc <xTaskResumeAll>
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000c00 	.word	0x20000c00
 8003d78:	20000c04 	.word	0x20000c04
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <prvGetNextExpireTime+0x44>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <prvGetNextExpireTime+0x44>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e001      	b.n	8003db6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000bfc 	.word	0x20000bfc

08003dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dd0:	f7ff fa90 	bl	80032f4 <xTaskGetTickCount>
 8003dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <prvSampleTimeNow+0x3c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d205      	bcs.n	8003dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003de0:	f000 f8ea 	bl	8003fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003df2:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <prvSampleTimeNow+0x3c>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003df8:	68fb      	ldr	r3, [r7, #12]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000c0c 	.word	0x20000c0c

08003e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d812      	bhi.n	8003e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e01b      	b.n	8003e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <prvInsertTimerInActiveList+0x7c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe f99a 	bl	8002186 <vListInsert>
 8003e52:	e012      	b.n	8003e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d206      	bcs.n	8003e6a <prvInsertTimerInActiveList+0x62>
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e007      	b.n	8003e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <prvInsertTimerInActiveList+0x80>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe f986 	bl	8002186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000c00 	.word	0x20000c00
 8003e88:	20000bfc 	.word	0x20000bfc

08003e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e92:	e07f      	b.n	8003f94 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db7b      	blt.n	8003f92 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe f9a4 	bl	80021f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff88 	bl	8003dc8 <prvSampleTimeNow>
 8003eb8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	d869      	bhi.n	8003f94 <prvProcessReceivedCommands+0x108>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <prvProcessReceivedCommands+0x3c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef1 	.word	0x08003ef1
 8003ed4:	08003f95 	.word	0x08003f95
 8003ed8:	08003f4b 	.word	0x08003f4b
 8003edc:	08003f81 	.word	0x08003f81
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003ef1 	.word	0x08003ef1
 8003ee8:	08003f95 	.word	0x08003f95
 8003eec:	08003f4b 	.word	0x08003f4b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	18d1      	adds	r1, r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a3a      	ldr	r2, [r7, #32]
 8003efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003efe:	f7ff ff83 	bl	8003e08 <prvInsertTimerInActiveList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d045      	beq.n	8003f94 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d13d      	bne.n	8003f94 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	441a      	add	r2, r3
 8003f20:	2300      	movs	r3, #0
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	2100      	movs	r1, #0
 8003f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f2a:	f7ff fe3d 	bl	8003ba8 <xTimerGenericCommand>
 8003f2e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d12e      	bne.n	8003f94 <prvProcessReceivedCommands+0x108>
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e7fe      	b.n	8003f48 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <prvProcessReceivedCommands+0xe0>
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e7fe      	b.n	8003f6a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	18d1      	adds	r1, r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	6a3a      	ldr	r2, [r7, #32]
 8003f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f7a:	f7ff ff45 	bl	8003e08 <prvInsertTimerInActiveList>
					break;
 8003f7e:	e009      	b.n	8003f94 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8003f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8c:	f000 fbba 	bl	8004704 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f90:	e000      	b.n	8003f94 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <prvProcessReceivedCommands+0x128>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f107 0108 	add.w	r1, r7, #8
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fc18 	bl	80027d4 <xQueueReceive>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f af74 	bne.w	8003e94 <prvProcessReceivedCommands+0x8>
	}
}
 8003fac:	bf00      	nop
 8003fae:	3728      	adds	r7, #40	; 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000c04 	.word	0x20000c04

08003fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fbe:	e044      	b.n	800404a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <prvSwitchTimerLists+0xb8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fca:	4b29      	ldr	r3, [pc, #164]	; (8004070 <prvSwitchTimerLists+0xb8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f90d 	bl	80021f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d12d      	bne.n	800404a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d90e      	bls.n	800401e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <prvSwitchTimerLists+0xb8>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fe f8b5 	bl	8002186 <vListInsert>
 800401c:	e015      	b.n	800404a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	2100      	movs	r1, #0
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff fdbd 	bl	8003ba8 <xTimerGenericCommand>
 800402e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <prvSwitchTimerLists+0x92>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	e7fe      	b.n	8004048 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <prvSwitchTimerLists+0xb8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1b5      	bne.n	8003fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <prvSwitchTimerLists+0xb8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvSwitchTimerLists+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a04      	ldr	r2, [pc, #16]	; (8004070 <prvSwitchTimerLists+0xb8>)
 8004060:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <prvSwitchTimerLists+0xbc>)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000bfc 	.word	0x20000bfc
 8004074:	20000c00 	.word	0x20000c00

08004078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800407e:	f000 f965 	bl	800434c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <prvCheckForValidListAndQueue+0x60>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d120      	bne.n	80040cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800408a:	4814      	ldr	r0, [pc, #80]	; (80040dc <prvCheckForValidListAndQueue+0x64>)
 800408c:	f7fe f82a 	bl	80020e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004090:	4813      	ldr	r0, [pc, #76]	; (80040e0 <prvCheckForValidListAndQueue+0x68>)
 8004092:	f7fe f827 	bl	80020e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <prvCheckForValidListAndQueue+0x6c>)
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <prvCheckForValidListAndQueue+0x64>)
 800409a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <prvCheckForValidListAndQueue+0x70>)
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <prvCheckForValidListAndQueue+0x68>)
 80040a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040a2:	2300      	movs	r3, #0
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <prvCheckForValidListAndQueue+0x74>)
 80040a8:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <prvCheckForValidListAndQueue+0x78>)
 80040aa:	210c      	movs	r1, #12
 80040ac:	200a      	movs	r0, #10
 80040ae:	f7fe f935 	bl	800231c <xQueueGenericCreateStatic>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <prvCheckForValidListAndQueue+0x60>)
 80040b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <prvCheckForValidListAndQueue+0x60>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <prvCheckForValidListAndQueue+0x60>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	490b      	ldr	r1, [pc, #44]	; (80040f4 <prvCheckForValidListAndQueue+0x7c>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fdee 	bl	8002ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040cc:	f000 f96c 	bl	80043a8 <vPortExitCritical>
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000c04 	.word	0x20000c04
 80040dc:	20000bd4 	.word	0x20000bd4
 80040e0:	20000be8 	.word	0x20000be8
 80040e4:	20000bfc 	.word	0x20000bfc
 80040e8:	20000c00 	.word	0x20000c00
 80040ec:	20000c88 	.word	0x20000c88
 80040f0:	20000c10 	.word	0x20000c10
 80040f4:	0800501c 	.word	0x0800501c

080040f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b04      	subs	r3, #4
 8004108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b04      	subs	r3, #4
 8004116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b04      	subs	r3, #4
 8004126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004128:	4a0c      	ldr	r2, [pc, #48]	; (800415c <pxPortInitialiseStack+0x64>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b14      	subs	r3, #20
 8004132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b04      	subs	r3, #4
 800413e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f06f 0202 	mvn.w	r2, #2
 8004146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b20      	subs	r3, #32
 800414c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	08004161 	.word	0x08004161

08004160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <prvTaskExitError+0x50>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d009      	beq.n	8004188 <prvTaskExitError+0x28>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e7fe      	b.n	8004186 <prvTaskExitError+0x26>
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800419a:	bf00      	nop
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0fc      	beq.n	800419c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000004 	.word	0x20000004
	...

080041c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <pxCurrentTCBConst2>)
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	6808      	ldr	r0, [r1, #0]
 80041c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	f380 8809 	msr	PSP, r0
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f04f 0000 	mov.w	r0, #0
 80041d6:	f380 8811 	msr	BASEPRI, r0
 80041da:	4770      	bx	lr
 80041dc:	f3af 8000 	nop.w

080041e0 <pxCurrentTCBConst2>:
 80041e0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop

080041e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041e8:	4808      	ldr	r0, [pc, #32]	; (800420c <prvPortStartFirstTask+0x24>)
 80041ea:	6800      	ldr	r0, [r0, #0]
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	f380 8808 	msr	MSP, r0
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8814 	msr	CONTROL, r0
 80041fa:	b662      	cpsie	i
 80041fc:	b661      	cpsie	f
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	df00      	svc	0
 8004208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800420a:	bf00      	nop
 800420c:	e000ed08 	.word	0xe000ed08

08004210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <xPortStartScheduler+0x118>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a44      	ldr	r2, [pc, #272]	; (800432c <xPortStartScheduler+0x11c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <xPortStartScheduler+0x24>
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e7fe      	b.n	8004232 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004234:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <xPortStartScheduler+0x118>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <xPortStartScheduler+0x120>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d109      	bne.n	8004252 <xPortStartScheduler+0x42>
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e7fe      	b.n	8004250 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <xPortStartScheduler+0x124>)
 8004254:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <xPortStartScheduler+0x128>)
 8004278:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <xPortStartScheduler+0x12c>)
 800427c:	2207      	movs	r2, #7
 800427e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004280:	e009      	b.n	8004296 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004282:	4b2e      	ldr	r3, [pc, #184]	; (800433c <xPortStartScheduler+0x12c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3b01      	subs	r3, #1
 8004288:	4a2c      	ldr	r2, [pc, #176]	; (800433c <xPortStartScheduler+0x12c>)
 800428a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d0ef      	beq.n	8004282 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042a2:	4b26      	ldr	r3, [pc, #152]	; (800433c <xPortStartScheduler+0x12c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1c3 0307 	rsb	r3, r3, #7
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d009      	beq.n	80042c2 <xPortStartScheduler+0xb2>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e7fe      	b.n	80042c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042c2:	4b1e      	ldr	r3, [pc, #120]	; (800433c <xPortStartScheduler+0x12c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <xPortStartScheduler+0x12c>)
 80042ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <xPortStartScheduler+0x12c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <xPortStartScheduler+0x12c>)
 80042d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <xPortStartScheduler+0x130>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a16      	ldr	r2, [pc, #88]	; (8004340 <xPortStartScheduler+0x130>)
 80042e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <xPortStartScheduler+0x130>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <xPortStartScheduler+0x130>)
 80042f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042f8:	f000 f8d6 	bl	80044a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <xPortStartScheduler+0x134>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004302:	f000 f8f5 	bl	80044f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <xPortStartScheduler+0x138>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <xPortStartScheduler+0x138>)
 800430c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004310:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004312:	f7ff ff69 	bl	80041e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004316:	f7ff f8bb 	bl	8003490 <vTaskSwitchContext>
	prvTaskExitError();
 800431a:	f7ff ff21 	bl	8004160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed00 	.word	0xe000ed00
 800432c:	410fc271 	.word	0x410fc271
 8004330:	410fc270 	.word	0x410fc270
 8004334:	e000e400 	.word	0xe000e400
 8004338:	20000cd0 	.word	0x20000cd0
 800433c:	20000cd4 	.word	0x20000cd4
 8004340:	e000ed20 	.word	0xe000ed20
 8004344:	20000004 	.word	0x20000004
 8004348:	e000ef34 	.word	0xe000ef34

0800434c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <vPortEnterCritical+0x54>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <vPortEnterCritical+0x54>)
 800436c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <vPortEnterCritical+0x54>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d10e      	bne.n	8004394 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <vPortEnterCritical+0x58>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <vPortEnterCritical+0x48>
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	e7fe      	b.n	8004392 <vPortEnterCritical+0x46>
	}
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000004 	.word	0x20000004
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <vPortExitCritical+0x4c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <vPortExitCritical+0x22>
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e7fe      	b.n	80043c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <vPortExitCritical+0x4c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <vPortExitCritical+0x4c>)
 80043d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <vPortExitCritical+0x4c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <vPortExitCritical+0x3e>
 80043dc:	2300      	movs	r3, #0
 80043de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000004 	.word	0x20000004
	...

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f7ff f82e 	bl	8003490 <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004480:	f7fe ff48 	bl	8003314 <xTaskIncrementTick>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <SysTick_Handler+0x3c>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <vPortSetupTimerInterrupt+0x34>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <vPortSetupTimerInterrupt+0x38>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <vPortSetupTimerInterrupt+0x3c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <vPortSetupTimerInterrupt+0x40>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	4a09      	ldr	r2, [pc, #36]	; (80044ec <vPortSetupTimerInterrupt+0x44>)
 80044c6:	3b01      	subs	r3, #1
 80044c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <vPortSetupTimerInterrupt+0x34>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	601a      	str	r2, [r3, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e010 	.word	0xe000e010
 80044e0:	e000e018 	.word	0xe000e018
 80044e4:	20000008 	.word	0x20000008
 80044e8:	10624dd3 	.word	0x10624dd3
 80044ec:	e000e014 	.word	0xe000e014

080044f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004500 <vPortEnableVFP+0x10>
 80044f4:	6801      	ldr	r1, [r0, #0]
 80044f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044fa:	6001      	str	r1, [r0, #0]
 80044fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044fe:	bf00      	nop
 8004500:	e000ed88 	.word	0xe000ed88

08004504 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800450a:	f3ef 8305 	mrs	r3, IPSR
 800450e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d913      	bls.n	800453e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <vPortValidateInterruptPriority+0x6c>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <vPortValidateInterruptPriority+0x70>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	7afa      	ldrb	r2, [r7, #11]
 8004526:	429a      	cmp	r2, r3
 8004528:	d209      	bcs.n	800453e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	e7fe      	b.n	800453c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <vPortValidateInterruptPriority+0x74>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <vPortValidateInterruptPriority+0x78>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d909      	bls.n	8004562 <vPortValidateInterruptPriority+0x5e>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	e7fe      	b.n	8004560 <vPortValidateInterruptPriority+0x5c>
	}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e3f0 	.word	0xe000e3f0
 8004574:	20000cd0 	.word	0x20000cd0
 8004578:	e000ed0c 	.word	0xe000ed0c
 800457c:	20000cd4 	.word	0x20000cd4

08004580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800458c:	f7fe fe08 	bl	80031a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004590:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <pvPortMalloc+0x170>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004598:	f000 f90c 	bl	80047b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800459c:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <pvPortMalloc+0x174>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 808c 	bne.w	80046c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01c      	beq.n	80045ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80045b0:	2208      	movs	r2, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	3308      	adds	r3, #8
 80045ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <pvPortMalloc+0x6a>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e7fe      	b.n	80045e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d068      	beq.n	80046c2 <pvPortMalloc+0x142>
 80045f0:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <pvPortMalloc+0x178>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d863      	bhi.n	80046c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045fa:	4b40      	ldr	r3, [pc, #256]	; (80046fc <pvPortMalloc+0x17c>)
 80045fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045fe:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <pvPortMalloc+0x17c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004604:	e004      	b.n	8004610 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d903      	bls.n	8004622 <pvPortMalloc+0xa2>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f1      	bne.n	8004606 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004622:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <pvPortMalloc+0x170>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	429a      	cmp	r2, r3
 800462a:	d04a      	beq.n	80046c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2208      	movs	r2, #8
 8004632:	4413      	add	r3, r2
 8004634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	2308      	movs	r3, #8
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	429a      	cmp	r2, r3
 800464c:	d91e      	bls.n	800468c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <pvPortMalloc+0xf4>
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e7fe      	b.n	8004672 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	f000 f8f6 	bl	8004878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <pvPortMalloc+0x178>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <pvPortMalloc+0x178>)
 8004698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <pvPortMalloc+0x178>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <pvPortMalloc+0x180>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d203      	bcs.n	80046ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <pvPortMalloc+0x178>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <pvPortMalloc+0x180>)
 80046ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <pvPortMalloc+0x174>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c2:	f7fe fd7b 	bl	80031bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <pvPortMalloc+0x164>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e7fe      	b.n	80046e2 <pvPortMalloc+0x162>
	return pvReturn;
 80046e4:	69fb      	ldr	r3, [r7, #28]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200048e0 	.word	0x200048e0
 80046f4:	200048ec 	.word	0x200048ec
 80046f8:	200048e4 	.word	0x200048e4
 80046fc:	200048d8 	.word	0x200048d8
 8004700:	200048e8 	.word	0x200048e8

08004704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d046      	beq.n	80047a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004716:	2308      	movs	r3, #8
 8004718:	425b      	negs	r3, r3
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	4b20      	ldr	r3, [pc, #128]	; (80047ac <vPortFree+0xa8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <vPortFree+0x42>
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e7fe      	b.n	8004744 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <vPortFree+0x5e>
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	e7fe      	b.n	8004760 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <vPortFree+0xa8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d019      	beq.n	80047a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d115      	bne.n	80047a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <vPortFree+0xa8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004788:	f7fe fd0a 	bl	80031a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vPortFree+0xac>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4413      	add	r3, r2
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vPortFree+0xac>)
 8004798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800479a:	6938      	ldr	r0, [r7, #16]
 800479c:	f000 f86c 	bl	8004878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047a0:	f7fe fd0c 	bl	80031bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200048ec 	.word	0x200048ec
 80047b0:	200048e4 	.word	0x200048e4

080047b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <prvHeapInit+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <prvHeapInit+0xac>)
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <prvHeapInit+0xb0>)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <prvHeapInit+0xb0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004800:	2208      	movs	r2, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <prvHeapInit+0xb4>)
 8004814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvHeapInit+0xb4>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <prvHeapInit+0xb8>)
 8004842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <prvHeapInit+0xbc>)
 800484a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <prvHeapInit+0xc0>)
 800484e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000cd8 	.word	0x20000cd8
 8004864:	200048d8 	.word	0x200048d8
 8004868:	200048e0 	.word	0x200048e0
 800486c:	200048e8 	.word	0x200048e8
 8004870:	200048e4 	.word	0x200048e4
 8004874:	200048ec 	.word	0x200048ec

08004878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <prvInsertBlockIntoFreeList+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e002      	b.n	800488c <prvInsertBlockIntoFreeList+0x14>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d8f7      	bhi.n	8004886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d108      	bne.n	80048ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d118      	bne.n	8004900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d00d      	beq.n	80048f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e008      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e003      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	200048d8 	.word	0x200048d8
 8004928:	200048e0 	.word	0x200048e0

0800492c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b0a2      	sub	sp, #136	; 0x88
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize(); // Initialize CMSIS-RTOS
 8004932:	f7fd f8f7 	bl	8001b24 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of message */
  const osMessageQueueAttr_t message_attributes = {
 8004936:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	611a      	str	r2, [r3, #16]
 8004946:	615a      	str	r2, [r3, #20]
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <MX_FREERTOS_Init+0xc8>)
 800494a:	673b      	str	r3, [r7, #112]	; 0x70
    .name = "message"
  };
  messageHandle = osMessageQueueNew (16, sizeof(uint16_t), &message_attributes);
 800494c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004950:	461a      	mov	r2, r3
 8004952:	2102      	movs	r1, #2
 8004954:	2010      	movs	r0, #16
 8004956:	f7fd fa25 	bl	8001da4 <osMessageQueueNew>
 800495a:	4602      	mov	r2, r0
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <MX_FREERTOS_Init+0xcc>)
 800495e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of key */
  const osThreadAttr_t key_attributes = {
 8004960:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fb3a 	bl	8004fe2 <memset>
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <MX_FREERTOS_Init+0xd0>)
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004976:	663b      	str	r3, [r7, #96]	; 0x60
 8004978:	2318      	movs	r3, #24
 800497a:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "key",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 512
  };
  keyHandle = osThreadNew(keyfunction, NULL, &key_attributes);
 800497c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004980:	461a      	mov	r2, r3
 8004982:	2100      	movs	r1, #0
 8004984:	481e      	ldr	r0, [pc, #120]	; (8004a00 <MX_FREERTOS_Init+0xd4>)
 8004986:	f7fd f935 	bl	8001bf4 <osThreadNew>
 800498a:	4602      	mov	r2, r0
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <MX_FREERTOS_Init+0xd8>)
 800498e:	601a      	str	r2, [r3, #0]

  /* definition and creation of led1 */
  const osThreadAttr_t led1_attributes = {
 8004990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004994:	2224      	movs	r2, #36	; 0x24
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb22 	bl	8004fe2 <memset>
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <MX_FREERTOS_Init+0xdc>)
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a8:	2308      	movs	r3, #8
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
    .name = "led1",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 512
  };
  led1Handle = osThreadNew(led1function, NULL, &led1_attributes);
 80049ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b0:	461a      	mov	r2, r3
 80049b2:	2100      	movs	r1, #0
 80049b4:	4815      	ldr	r0, [pc, #84]	; (8004a0c <MX_FREERTOS_Init+0xe0>)
 80049b6:	f7fd f91d 	bl	8001bf4 <osThreadNew>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <MX_FREERTOS_Init+0xe4>)
 80049be:	601a      	str	r2, [r3, #0]

  /* definition and creation of led2 */
  const osThreadAttr_t led2_attributes = {
 80049c0:	1d3b      	adds	r3, r7, #4
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fb0b 	bl	8004fe2 <memset>
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <MX_FREERTOS_Init+0xe8>)
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	2308      	movs	r3, #8
 80049d8:	61fb      	str	r3, [r7, #28]
    .name = "led2",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 512
  };
  led2Handle = osThreadNew(led2function, NULL, &led2_attributes);
 80049da:	1d3b      	adds	r3, r7, #4
 80049dc:	461a      	mov	r2, r3
 80049de:	2100      	movs	r1, #0
 80049e0:	480d      	ldr	r0, [pc, #52]	; (8004a18 <MX_FREERTOS_Init+0xec>)
 80049e2:	f7fd f907 	bl	8001bf4 <osThreadNew>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <MX_FREERTOS_Init+0xf0>)
 80049ea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80049ec:	bf00      	nop
 80049ee:	3788      	adds	r7, #136	; 0x88
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08005024 	.word	0x08005024
 80049f8:	20004940 	.word	0x20004940
 80049fc:	0800502c 	.word	0x0800502c
 8004a00:	08004a21 	.word	0x08004a21
 8004a04:	20004934 	.word	0x20004934
 8004a08:	08005030 	.word	0x08005030
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	20004938 	.word	0x20004938
 8004a14:	08005038 	.word	0x08005038
 8004a18:	08004ad1 	.word	0x08004ad1
 8004a1c:	2000493c 	.word	0x2000493c

08004a20 <keyfunction>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_keyfunction */
void keyfunction(void *argument)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN keyfunction */
	uint16_t p;
  /* Infinite loop */
for(;;)
{p = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	81fb      	strh	r3, [r7, #14]
osMessageQueuePut(messageHandle,(void *)&p,0,0);
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <keyfunction+0x44>)
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	f107 010e 	add.w	r1, r7, #14
 8004a34:	2300      	movs	r3, #0
 8004a36:	2200      	movs	r2, #0
 8004a38:	f7fd fa3a 	bl	8001eb0 <osMessageQueuePut>
osDelay(500);
 8004a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a40:	f7fd f982 	bl	8001d48 <osDelay>
p= 2;
 8004a44:	2302      	movs	r3, #2
 8004a46:	81fb      	strh	r3, [r7, #14]
osMessageQueuePut(messageHandle,(void *)&p,0,0);
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <keyfunction+0x44>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	f107 010e 	add.w	r1, r7, #14
 8004a50:	2300      	movs	r3, #0
 8004a52:	2200      	movs	r2, #0
 8004a54:	f7fd fa2c 	bl	8001eb0 <osMessageQueuePut>
osDelay(500);
 8004a58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a5c:	f7fd f974 	bl	8001d48 <osDelay>
{p = 1;
 8004a60:	e7e2      	b.n	8004a28 <keyfunction+0x8>
 8004a62:	bf00      	nop
 8004a64:	20004940 	.word	0x20004940

08004a68 <led1function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led1function */
void led1function(void *argument)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint16_t p;
	osStatus_t sta;
	for(;;)
	{
  	sta = osMessageQueueGet (messageHandle, (void *)&p, 0, 100);
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <led1function+0x60>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f107 010a 	add.w	r1, r7, #10
 8004a78:	2364      	movs	r3, #100	; 0x64
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f7fd fa8c 	bl	8001f98 <osMessageQueueGet>
 8004a80:	60f8      	str	r0, [r7, #12]
	if(sta == osOK)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11b      	bne.n	8004ac0 <led1function+0x58>
	{

	if(p == 1){
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10c      	bne.n	8004aa8 <led1function+0x40>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_9,GPIO_PIN_SET);
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a94:	480d      	ldr	r0, [pc, #52]	; (8004acc <led1function+0x64>)
 8004a96:	f7fb ffd9 	bl	8000a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_10,GPIO_PIN_RESET);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aa0:	480a      	ldr	r0, [pc, #40]	; (8004acc <led1function+0x64>)
 8004aa2:	f7fb ffd3 	bl	8000a4c <HAL_GPIO_WritePin>
 8004aa6:	e00b      	b.n	8004ac0 <led1function+0x58>
		}
	else
	{
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_9,GPIO_PIN_RESET);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aae:	4807      	ldr	r0, [pc, #28]	; (8004acc <led1function+0x64>)
 8004ab0:	f7fb ffcc 	bl	8000a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_10,GPIO_PIN_SET);
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aba:	4804      	ldr	r0, [pc, #16]	; (8004acc <led1function+0x64>)
 8004abc:	f7fb ffc6 	bl	8000a4c <HAL_GPIO_WritePin>
	  }
	}
	osDelay(1);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fd f941 	bl	8001d48 <osDelay>
  	sta = osMessageQueueGet (messageHandle, (void *)&p, 0, 100);
 8004ac6:	e7d3      	b.n	8004a70 <led1function+0x8>
 8004ac8:	20004940 	.word	0x20004940
 8004acc:	40021400 	.word	0x40021400

08004ad0 <led2function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led2function */
void led2function(void *argument)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led2function */
  /* Infinite loop */
	for(;;)
	{
	osDelay(1);
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f7fd f935 	bl	8001d48 <osDelay>
 8004ade:	e7fb      	b.n	8004ad8 <led2function+0x8>

08004ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b00:	f043 0320 	orr.w	r3, r3, #32
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <MX_GPIO_Init+0xb4>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b50:	4811      	ldr	r0, [pc, #68]	; (8004b98 <MX_GPIO_Init+0xb8>)
 8004b52:	f7fb ff7b 	bl	8000a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8004b56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	480a      	ldr	r0, [pc, #40]	; (8004b98 <MX_GPIO_Init+0xb8>)
 8004b70:	f7fb fdd2 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key_Pin;
 8004b74:	2301      	movs	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(key_GPIO_Port, &GPIO_InitStruct);
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4619      	mov	r1, r3
 8004b86:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_GPIO_Init+0xbc>)
 8004b88:	f7fb fdc6 	bl	8000718 <HAL_GPIO_Init>

}
 8004b8c:	bf00      	nop
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40021400 	.word	0x40021400
 8004b9c:	40020000 	.word	0x40020000

08004ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ba4:	f7fb fc94 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ba8:	f000 f80a 	bl	8004bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bac:	f7ff ff98 	bl	8004ae0 <MX_GPIO_Init>
  MX_RTC_Init();
 8004bb0:	f000 f8a2 	bl	8004cf8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004bb4:	f7ff feba 	bl	800492c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004bb8:	f7fc ffe8 	bl	8001b8c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004bbc:	e7fe      	b.n	8004bbc <main+0x1c>
	...

08004bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b098      	sub	sp, #96	; 0x60
 8004bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bca:	2230      	movs	r2, #48	; 0x30
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa07 	bl	8004fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <SystemClock_Config+0xfc>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <SystemClock_Config+0xfc>)
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <SystemClock_Config+0xfc>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <SystemClock_Config+0x100>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <SystemClock_Config+0x100>)
 8004c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <SystemClock_Config+0x100>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c34:	2301      	movs	r3, #1
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c42:	2304      	movs	r3, #4
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c46:	23a8      	movs	r3, #168	; 0xa8
 8004c48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb ff12 	bl	8000a80 <HAL_RCC_OscConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004c62:	f000 f841 	bl	8004ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c66:	230f      	movs	r3, #15
 8004c68:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	2105      	movs	r1, #5
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fc f93d 	bl	8000f04 <HAL_RCC_ClockConfig>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004c90:	f000 f82a 	bl	8004ce8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c94:	2302      	movs	r3, #2
 8004c96:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c9e:	f107 030c 	add.w	r3, r7, #12
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc fb3a 	bl	800131c <HAL_RCCEx_PeriphCLKConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004cae:	f000 f81b 	bl	8004ce8 <Error_Handler>
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3760      	adds	r7, #96	; 0x60
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40007000 	.word	0x40007000

08004cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004cd6:	f7fb fc1d 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40001400 	.word	0x40001400

08004ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <MX_RTC_Init+0x44>)
 8004cfe:	4a10      	ldr	r2, [pc, #64]	; (8004d40 <MX_RTC_Init+0x48>)
 8004d00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004d02:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d0a:	227f      	movs	r2, #127	; 0x7f
 8004d0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004d26:	4805      	ldr	r0, [pc, #20]	; (8004d3c <MX_RTC_Init+0x44>)
 8004d28:	f7fc fbda 	bl	80014e0 <HAL_RTC_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004d32:	f7ff ffd9 	bl	8004ce8 <Error_Handler>
  }

}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20004944 	.word	0x20004944
 8004d40:	40002800 	.word	0x40002800

08004d44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <HAL_RTC_MspInit+0x24>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d102      	bne.n	8004d5c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_RTC_MspInit+0x28>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40002800 	.word	0x40002800
 8004d6c:	42470e3c 	.word	0x42470e3c

08004d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_MspInit+0x54>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_MspInit+0x54>)
 8004d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d84:	6453      	str	r3, [r2, #68]	; 0x44
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_MspInit+0x54>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_MspInit+0x54>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <HAL_MspInit+0x54>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_MspInit+0x54>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dae:	2200      	movs	r2, #0
 8004db0:	210f      	movs	r1, #15
 8004db2:	f06f 0001 	mvn.w	r0, #1
 8004db6:	f7fb fc85 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800

08004dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08c      	sub	sp, #48	; 0x30
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8004dd8:	2200      	movs	r2, #0
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	2037      	movs	r0, #55	; 0x37
 8004dde:	f7fb fc71 	bl	80006c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8004de2:	2037      	movs	r0, #55	; 0x37
 8004de4:	f7fb fc8a 	bl	80006fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <HAL_InitTick+0xa4>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_InitTick+0xa4>)
 8004df2:	f043 0320 	orr.w	r3, r3, #32
 8004df6:	6413      	str	r3, [r2, #64]	; 0x40
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_InitTick+0xa4>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e04:	f107 0210 	add.w	r2, r7, #16
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fa52 	bl	80012b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fc fa3c 	bl	8001290 <HAL_RCC_GetPCLK1Freq>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <HAL_InitTick+0xa8>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	0c9b      	lsrs	r3, r3, #18
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_InitTick+0xac>)
 8004e2e:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <HAL_InitTick+0xb0>)
 8004e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_InitTick+0xac>)
 8004e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e38:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <HAL_InitTick+0xac>)
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_InitTick+0xac>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_InitTick+0xac>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <HAL_InitTick+0xac>)
 8004e4e:	f7fc fc2c 	bl	80016aa <HAL_TIM_Base_Init>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8004e58:	4806      	ldr	r0, [pc, #24]	; (8004e74 <HAL_InitTick+0xac>)
 8004e5a:	f7fc fc5b 	bl	8001714 <HAL_TIM_Base_Start_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	e000      	b.n	8004e64 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3730      	adds	r7, #48	; 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	431bde83 	.word	0x431bde83
 8004e74:	20004964 	.word	0x20004964
 8004e78:	40001400 	.word	0x40001400

08004e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8e:	e7fe      	b.n	8004e8e <HardFault_Handler+0x4>

08004e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <MemManage_Handler+0x4>

08004e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e9a:	e7fe      	b.n	8004e9a <BusFault_Handler+0x4>

08004e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea0:	e7fe      	b.n	8004ea0 <UsageFault_Handler+0x4>

08004ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004eb4:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <TIM7_IRQHandler+0x10>)
 8004eb6:	f7fc fc51 	bl	800175c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20004964 	.word	0x20004964

08004ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <SystemInit+0x60>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <SystemInit+0x60>)
 8004ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <SystemInit+0x64>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <SystemInit+0x64>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <SystemInit+0x64>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <SystemInit+0x64>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <SystemInit+0x64>)
 8004ef0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <SystemInit+0x64>)
 8004efc:	4a0b      	ldr	r2, [pc, #44]	; (8004f2c <SystemInit+0x68>)
 8004efe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <SystemInit+0x64>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <SystemInit+0x64>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <SystemInit+0x64>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SystemInit+0x60>)
 8004f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f18:	609a      	str	r2, [r3, #8]
#endif
}
 8004f1a:	bf00      	nop
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	24003010 	.word	0x24003010

08004f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f36:	e003      	b.n	8004f40 <LoopCopyDataInit>

08004f38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f3e:	3104      	adds	r1, #4

08004f40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f40:	480b      	ldr	r0, [pc, #44]	; (8004f70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f48:	d3f6      	bcc.n	8004f38 <CopyDataInit>
  ldr  r2, =_sbss
 8004f4a:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f4c:	e002      	b.n	8004f54 <LoopFillZerobss>

08004f4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f50:	f842 3b04 	str.w	r3, [r2], #4

08004f54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f58:	d3f9      	bcc.n	8004f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f5a:	f7ff ffb3 	bl	8004ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f5e:	f000 f811 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f62:	f7ff fe1d 	bl	8004ba0 <main>
  bx  lr    
 8004f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004f6c:	08005068 	.word	0x08005068
  ldr  r0, =_sdata
 8004f70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f74:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004f78:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004f7c:	200049a4 	.word	0x200049a4

08004f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f80:	e7fe      	b.n	8004f80 <ADC_IRQHandler>
	...

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4e0d      	ldr	r6, [pc, #52]	; (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	; (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1ba4      	subs	r4, r4, r6
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2500      	movs	r5, #0
 8004f90:	42a5      	cmp	r5, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4e0b      	ldr	r6, [pc, #44]	; (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	; (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 f82c 	bl	8004ff4 <_init>
 8004f9c:	1ba4      	subs	r4, r4, r6
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	42a5      	cmp	r5, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fac:	4798      	blx	r3
 8004fae:	3501      	adds	r5, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fb6:	4798      	blx	r3
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08005060 	.word	0x08005060
 8004fc0:	08005060 	.word	0x08005060
 8004fc4:	08005060 	.word	0x08005060
 8004fc8:	08005064 	.word	0x08005064

08004fcc <memcpy>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	1e43      	subs	r3, r0, #1
 8004fd0:	440a      	add	r2, r1
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	d100      	bne.n	8004fd8 <memcpy+0xc>
 8004fd6:	bd10      	pop	{r4, pc}
 8004fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe0:	e7f7      	b.n	8004fd2 <memcpy+0x6>

08004fe2 <memset>:
 8004fe2:	4402      	add	r2, r0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d100      	bne.n	8004fec <memset+0xa>
 8004fea:	4770      	bx	lr
 8004fec:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff0:	e7f9      	b.n	8004fe6 <memset+0x4>
	...

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
